{"searchDocs":[{"title":"2023-kubecon","type":0,"sectionRef":"#","url":"/en-us/blog/2023-kubecon","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"config-with-file","type":0,"sectionRef":"#","url":"/en-us/blog/config-with-file","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"admin-sdk-intro","type":0,"sectionRef":"#","url":"/en-us/blog/admin-sdk-intro","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"configmap","type":0,"sectionRef":"#","url":"/en-us/blog/configmap","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"30 lines of code to write a Wasm Go plugin","type":0,"sectionRef":"#","url":"/en-us/blog/30-line-wasm","content":"TBD","keywords":"higress wasm","version":null},{"title":"console-dev","type":0,"sectionRef":"#","url":"/en-us/blog/console-dev","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"DeployOnWindows","type":0,"sectionRef":"#","url":"/en-us/blog/DeployOnWindows","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"Welcome to sign up for Higress' first offline meetup","type":0,"sectionRef":"#","url":"/en-us/blog/first-meetup","content":"","keywords":"higress meetup","version":null},{"title":"e2e-debug","type":0,"sectionRef":"#","url":"/en-us/blog/e2e-debug","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"Alibaba Open Source Cloud Native Gateway： Higress","type":0,"sectionRef":"#","url":"/en-us/blog/higress","content":"","keywords":"higress","version":null},{"title":"higress-code","type":0,"sectionRef":"#","url":"/en-us/blog/higress-code","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"Higress + Nacos Microservice Gateway Best Practices","type":0,"sectionRef":"#","url":"/en-us/blog/nacos","content":"TBD","keywords":"higress wasm","version":null},{"title":"hring","type":0,"sectionRef":"#","url":"/en-us/blog/hring","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"ospp-2023","type":0,"sectionRef":"#","url":"/en-us/blog/ospp-2023","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"AIGC OpenAPI Cost Reduction via Higress","type":0,"sectionRef":"#","url":"/en-us/blog/ai_plugin","content":"","keywords":"Higress AIGC AI plugin","version":null},{"title":"Prerequisites​","type":1,"pageTitle":"AIGC OpenAPI Cost Reduction via Higress","url":"/en-us/blog/ai_plugin#prerequisites","content":"Install Higress. Please refer to Deploy Higress by Helm.Prepare the development environment for WASM plugins with Golang. Please refer to Developing a WASM plugin with Golang | Higress. ","version":null,"tagName":"h2"},{"title":"AI Proxy WASM Plugin​","type":1,"pageTitle":"AIGC OpenAPI Cost Reduction via Higress","url":"/en-us/blog/ai_plugin#ai-proxy-wasm-plugin","content":"The following will give the AI proxy plugin implementation based on Higress and WASM. Higress supports scalability externally based on WASM. The multi-language ecology and hot-swapping mechanism provided by the WASM facilitate the implementation and deployment of the plugin. Higress also supports requesting external services in the plugin, which provides an efficient solution path for the implementation of the AI proxy plugin. ","version":null,"tagName":"h2"},{"title":"Code Implementation​","type":1,"pageTitle":"AIGC OpenAPI Cost Reduction via Higress","url":"/en-us/blog/ai_plugin#code-implementation","content":"The following code implements the request proxy to OPENAI-API based on HTTP. For details, please refer to the AI proxy plugin. The specific implementation steps are as follows: Create a new HTTP client, specify the OpenAI API host through the RouteCluster method, and determine the request proxy path. func parseConfig(json gjson.Result, config *MyConfig, log wrapper.Log) error { //The default forwarding path is OpenAI API. //Users can adjust through configuration. chatgptUri := json.Get(&quot;chatgptUri&quot;).String() var chatgptHost string if chatgptUri == &quot;&quot; { config.ChatgptPath = &quot;/v1/completions&quot; chatgptHost = &quot;api.openai.com&quot; } ... //Specify the specific request proxy host through RouteCluster. config.client = wrapper.NewClusterClient(wrapper.RouteCluster{ Host: chatgptHost, }) ... }  Encapsulate the request in the OpenAI-API format, send requests and receive responses through the HTTP Client, and send responses to the user. //OPENAI API request body template. Please refer to https://platform.openai.com/docs/api-reference/chat const bodyTemplate string = ` { &quot;model&quot;:&quot;%s&quot;, &quot;prompt&quot;:&quot;%s&quot;, &quot;temperature&quot;:0.9, &quot;max_tokens&quot;: 150, &quot;top_p&quot;: 1, &quot;frequency_penalty&quot;: 0.0, &quot;presence_penalty&quot;: 0.6, &quot;stop&quot;: [&quot;%s&quot;, &quot;%s&quot;] } ` func onHttpRequestHeaders(ctx wrapper.HttpContext, config MyConfig, log wrapper.Log) types.Action { ... //Encapsulate the OPENAI API request body according to the user's request content. body := fmt.Sprintf(bodyTemplate, config.Model, prompt[0], config.HumanId, config.AIId) //Post request via HTTP client. err = config.client.Post(config.ChatgptPath, [][2]string{ {&quot;Content-Type&quot;, &quot;application/json&quot;}, {&quot;Authorization&quot;, &quot;Bearer &quot; + config.ApiKey}, }, []byte(body), func(statusCode int, responseHeaders http.Header, responseBody []byte) { var headers [][2]string for key, value := range responseHeaders { headers = append(headers, [2]string{key, value[0]}) } //Receive the response from the OPENAI API and send it to user proxywasm.SendHttpResponse(uint32(statusCode), headers, responseBody, -1) }, 10000) ... }  Enable the custom AI-Proxy-Wasm plugin in Higress as follows:  This example provides the compiled AI-proxy-plugin WASM file and completes the construction and push of the docker image. The recommended configuration is as follows: Name\tRecommended configurationImage URL\toci://registry.cn-hangzhou.aliyuncs.com/zwj_test/chatgpt-proxy:1.0.0 Plugin Execution Phase\tAuthz Plugin Execution Priority\t1 ","version":null,"tagName":"h3"},{"title":"Plugin configuration instructions​","type":1,"pageTitle":"AIGC OpenAPI Cost Reduction via Higress","url":"/en-us/blog/ai_plugin#plugin-configuration-instructions","content":"AI-Proxy-Plugin is easy to configure and supports proxy forwarding at the global/domain name level/routing level. Route-level configuration is recommended: route config-strategy-enable plugin. An example configuration is as follows： apiKey: &quot;xxxxxxxxxxxxxxxxxx&quot; model: &quot;curie&quot; promptParam: &quot;text&quot;  According to this configuration, the gateway proxies to the Curie model in OpenAI, and the user enters prompts in the URL through the keyword &quot;text&quot;. curl &quot;http://{GatewayIP}/?text=Say,hello&quot;  Response from Curie model in OpenAI:  ","version":null,"tagName":"h3"},{"title":"Multi-tenant authentication based on Key Auth​","type":1,"pageTitle":"AIGC OpenAPI Cost Reduction via Higress","url":"/en-us/blog/ai_plugin#multi-tenant-authentication-based-on-key-auth","content":"Different from the form of issuing AI-API keys for each member, enterprises can utilize internal authorization (such as Key Auth, etc.) and rely on the unified AI-API key for request proxy to achieve unified management of API usage. Key Auth implements the authentication based on the Gateway level API Key. Key Auth supports parsing the API Key from the URL parameter or request header of the HTTP requests and verifies whether the API has permission to access.  consumers: - credential: &quot;xxxxxx&quot; name: &quot;consumer1&quot; - credential: &quot;yyyyyy&quot; name: &quot;consumer2&quot; global_auth: false in_header: true keys: - &quot;apikey&quot;   allow: [consumer1]  The above configuration defines consumers, and only consumer1 has the access right to the AI model service under the current route. curl &quot;http://{GatewayIP}/?text=Say,hello&quot; #The request does not provide an API Key, return 401 curl &quot;http://{GatewayIP}/?text=Say,hello&quot; -H &quot;apikey:zzzzzz&quot; #The API Key provided by the request is not authorized to access, return 401 curl &quot;http://{GatewayIP}/?text=Say,hello&quot; -H &quot;apikey:yyyyyy&quot; #The caller matched according to the API Key provided in the request has no access rights, return 403 curl &quot;http://{GatewayIP}/?text=Say,hello&quot; -H &quot;apikey:xxxxxx&quot; #The caller has access to the AI model service, the request will be proxied to the AI model, and the response from the OpenAI API will be received normally  In addition to providing gateway-level multi-tenant authentication, Higress provides traffic control and other capabilities. The Key Rate Limit plugin can limit the user's application rate based on the user's membership in the consumption group. ","version":null,"tagName":"h2"},{"title":"Data protection based on Request Block​","type":1,"pageTitle":"AIGC OpenAPI Cost Reduction via Higress","url":"/en-us/blog/ai_plugin#data-protection-based-on-request-block","content":"For AIGC applications, especially LLM services, a good return often requires users to provide enough prompts as model input. Users face the risk of data leakage in the process of providing prompts. Ensuring data security in the process of using the AIGC application is also an important issue for API callers. Protecting data security involves stringent control over the API calling channels. One method involves confirming specifically approved models with their published API. Another way is to intercept user requests containing sensitive information. These can be achieved by setting specific request interception at the gateway level. Higress provides request interception based on the request block plugin, which can prevent unauthorized models from accessing user information and prevent user requests containing sensitive information from being exposed to the external network. blocked_code: 404 block_urls: - password - pw case_sensitive: false  The above configuration defines URL-based shielding fields under the current route, in which requests containing sensitive information such as &quot;password&quot; and &quot;pw&quot; will be blocked。 curl &quot;http://{GatewayIP}/?text=Mypassword=xxxxxx&quot; -H &quot;apikey:xxxxxx&quot; curl &quot;http://{GatewayIP}/?text=pw=xxxxxx&quot; -H &quot;apikey:xxxxxx&quot; #The above request will be forbidden and return 404  ","version":null,"tagName":"h2"},{"title":"Usage observation and analysis​","type":1,"pageTitle":"AIGC OpenAPI Cost Reduction via Higress","url":"/en-us/blog/ai_plugin#usage-observation-and-analysis","content":"For organizations, observing and analyzing the usage of large AI model calls for each user helps to understand their usage and costs. It is also necessary for individual users to understand their own call volume and overhead. Commercial Higress is deeply integrated with various metrics and log systems and provides an out-of-the-box usage observation and analysis report construction mechanism, which can view the usage of various APIs in real time and filter according to various parameters. Taking the observation of each user's usage of the OPENAI-Curie model as an example, the administrator can set the observability parameter in the request header：x-mse-consumer, to distinguish users through MSE console - Cloud native Gateway - Gateway instance - Parameter Configurator- Custom Format. After adding the observability parameters, enter the Observation Analysis - Log Center to set the use statistics chart function to complete the observation and analysis of API usage. As shown in the figure below, the amount of calls to the OPENAI-Curie model of user consumer1 and user consumer2 is presented in the form of a pie chart.  Join the Higress community Join Higress Slack: https://join.slack.com/t/w1689142780-euk177225/shared_invite/zt-1zbjm9d34-4nptVXPpNvnuKEKZ7V3MIg To get invited: https://communityinviter.com/apps/w1689142780-euk177225/higress If you find Higress helpful, welcome to Higress to star us! ","version":null,"tagName":"h2"},{"title":"pilot-debug","type":0,"sectionRef":"#","url":"/en-us/blog/pilot-debug","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"plugin-transformer","type":0,"sectionRef":"#","url":"/en-us/blog/plugin-transformer","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"release-1.3","type":0,"sectionRef":"#","url":"/en-us/blog/release-1.3","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"release-070","type":0,"sectionRef":"#","url":"/en-us/blog/release-070","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"release-100","type":0,"sectionRef":"#","url":"/en-us/blog/release-100","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"skywalking","type":0,"sectionRef":"#","url":"/en-us/blog/skywalking","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"qwen-or-chatgpt","type":0,"sectionRef":"#","url":"/en-us/blog/qwen-or-chatgpt","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"user-mq","type":0,"sectionRef":"#","url":"/en-us/blog/user-mq","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"user-uu","type":0,"sectionRef":"#","url":"/en-us/blog/user-uu","content":"Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":null},{"title":"Component Compilation Instructions","type":0,"sectionRef":"#","url":"/en-us/docs/dev/architecture","content":"","keywords":"higress architecture","version":"Next"},{"title":"Higress Controller​","type":1,"pageTitle":"Component Compilation Instructions","url":"/en-us/docs/dev/architecture#higress-controller","content":"The Higress controller is a control plane that connects to Istio to generate Istio API objects and sends them to Istio using the xDS protocol. To compile the binary that can run in the local environment, execute make build in the higress repository directory. If need to compile the Docker image, please execute make docker-build . ","version":"Next","tagName":"h2"},{"title":"Higress Gateway​","type":1,"pageTitle":"Component Compilation Instructions","url":"/en-us/docs/dev/architecture#higress-gateway","content":"The Higress gateway is a data plane that implements gateway routing and forwarding capabilities. ","version":"Next","tagName":"h2"},{"title":"Quick Build​","type":1,"pageTitle":"Component Compilation Instructions","url":"/en-us/docs/dev/architecture#quick-build","content":"Suitable scenario: Envoy itself isn't modified, meaning there is no need to rebuild the envoy binary. Steps: Enter the higress repo in the terminal.Execute make build-gateway-local to start building the image of Higress Gateway.The image tag will be displayed in the terminal after the build finishes. ","version":"Next","tagName":"h3"},{"title":"Full Build​","type":1,"pageTitle":"Component Compilation Instructions","url":"/en-us/docs/dev/architecture#full-build","content":"Suitable scenario: The envoy binary needs to be rebuilt. Steps: Enter the higress repo in the terminal.Execute cd external/proxy; BUILD_WITH_CONTAINER=1 make test_release to build the envoy binary.Once the build finishes, the built artifact, envoy.tar.gz, will be placed in the external/package folder in the higress repo.Rename the envoy.tar.gz to envoy-amd64.tar.gz or envoy-arm64.tar.gz, based on your local architecture.If you want to build a multi-arch image, please re-do step 2 and 3 with another architecture, and copy the renamed built artifact here.Follow the steps mentioned above in the &quot;Quick Build&quot; section to build an Higress Gateway image. ","version":"Next","tagName":"h3"},{"title":"console-dev","type":0,"sectionRef":"#","url":"/en-us/docs/dev/console-dev","content":"console-dev Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Code Reading Instructions","type":0,"sectionRef":"#","url":"/en-us/docs/dev/code","content":"Code Reading Instructions If you would like to constribute source code for Higress, please check out the Contribute Guide Code base structure descriptions: cmd: Containing functions of parsing command-line arguments, etc. pkg/ingress: Containing functions of converting Ingress resources to Istio resources. pkg/bootstrap: Containing functions of starting gRPC/xDS/HTTP servers. registry: Implementations of various service registries. envoy: Containing the referred official envoy codebase and corresponding patches. istio: Containing the referred official istio codebase and corresponding patches. plugins: Higress plugin SDK and official built-in plugins. tools: Building related scripts. docker: Docker image building related scripts. During compilation, make prebuild will be executed automatically, generating an external folder, which contains all the external dependencies, including envoy and istios, with all the patches applied. If you would like to modify the source code of envoy or istio, you can do it directly in the external folder, then execute the prebuild command and generate the patch file with diff later. For example: mv external/envoy external/envoy_new make prebuild cd external diff -Naur envoy envoy_new &gt; ../envoy/1.20/patches/envoy/$(date +%Y%m%d)-what-changed.patch Please be aware that patches will be applied in the order of file names. So please use timestamp as a prefix when naming a new patch file.","keywords":"higress coding","version":"Next"},{"title":"e2e-debug","type":0,"sectionRef":"#","url":"/en-us/docs/dev/e2e-debug","content":"e2e-debug Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Alibaba Open Source Cloud Native Gateway: Higress","type":0,"sectionRef":"#","url":"/en-us/docs/dev/CustomResourceDefinition","content":"Alibaba Open Source Cloud Native Gateway: Higress","keywords":"higress CRD","version":"Next"},{"title":"Label an Issue","type":0,"sectionRef":"#","url":"/en-us/docs/developers/committer-guide/label-an-issue-guide_dev","content":"Label an Issue If you are handling an issue, remember to mark the issue clearly with one or more labels whenever you think it's meaningful. With labels on, other developers can easily recognize problems, classify them or track progress. For issues or pull requests that need coding and further version release to fix, you should always mark it with a milestone. Some frequently used labels: Help Wanted help wantedgood first issue Priority priority/blockerpriority/highpriority/lowpriority/normal Status status/need-triagestatus/DO-NOT-MERGEstatus/READY-TO-MERGEstatus/invalid status/wontfix Type type/bugtype/documentationtype/enhancementtype/feature","keywords":"Higress","version":"Next"},{"title":"Release Guide","type":0,"sectionRef":"#","url":"/en-us/docs/developers/committer-guide/release-guide_dev","content":"Release Guide TBD","keywords":"Higress","version":"Next"},{"title":"Website Guide","type":0,"sectionRef":"#","url":"/en-us/docs/developers/committer-guide/website-guide_dev","content":"Website Guide The website repository of Higress is https://github.com/higress-group/higress-group.github.io.After building the website, it'll be published to higress.io automatically.","keywords":"Higress","version":"Next"},{"title":"New contributor guide","type":0,"sectionRef":"#","url":"/en-us/docs/developers/contributor-guide/new-contributor-guide_dev","content":"","keywords":"Higress contributor","version":"Next"},{"title":"Subscribe to the mailing list​","type":1,"pageTitle":"New contributor guide","url":"/en-us/docs/developers/contributor-guide/new-contributor-guide_dev#subscribe-to-the-mailing-list","content":"TBD ","version":"Next","tagName":"h3"},{"title":"Reporting issue​","type":1,"pageTitle":"New contributor guide","url":"/en-us/docs/developers/contributor-guide/new-contributor-guide_dev#reporting-issue","content":"You can always reporting an issue to Higress via Github Issues. If you are reporting bugs, please refer to the issue report template. If you are reporting feature, please refer to the issue report template. If you are reporting regular issues, like raise an question, you can open an regular issue. ","version":"Next","tagName":"h3"},{"title":"Sending pull request​","type":1,"pageTitle":"New contributor guide","url":"/en-us/docs/developers/contributor-guide/new-contributor-guide_dev#sending-pull-request","content":"Follow the checklist in the pull request templateBefore you sending out the pull request, please sync your forked repository with remote repository, this will make your pull request simple and clear. See guide below: git remote add upstream git@github.com:alibaba/higress.git git fetch upstream git rebase upstream/main git checkout -b your_awesome_patch ... add some work git push origin your_awesome_patch  ","version":"Next","tagName":"h3"},{"title":"Code convention​","type":1,"pageTitle":"New contributor guide","url":"/en-us/docs/developers/contributor-guide/new-contributor-guide_dev#code-convention","content":"Please check the CONTRIBUTING.md for code convention. ","version":"Next","tagName":"h3"},{"title":"Developers","type":0,"sectionRef":"#","url":"/en-us/docs/developers/developers_dev","content":"","keywords":"Higress Developers","version":"Next"},{"title":"Higress Team​","type":1,"pageTitle":"Developers","url":"/en-us/docs/developers/developers_dev#higress-team","content":"This page shows Higress developers and continues to expand. The list is not prioritized. Higress Committer List name\tgithub\tcompanyTianyi Zhang\tjohnlanni\tAlibaba Leilei Geng\tgengleilei\tAlibaba Yang Fan\tSpecialYang\tAlibaba Bingkun Zhao\tsjtuzbk\tAlibaba Yiqun Ling\tLynskylate\tPdd Holdings Inc Xunzhuo Liu\tXunzhuo\tTencent Yiquan Dong\tCH3CHO\tTrip.com Qianglin Li\tCharlie17Li\tZJU-SEL Pengyuan Song\tsongpengyuan\tOkki.com YaTao Tian\tHinsteny\tAnt ","version":"Next","tagName":"h2"},{"title":"Higress Developer Roles​","type":1,"pageTitle":"Developers","url":"/en-us/docs/developers/developers_dev#higress-developer-roles","content":"Higress developers include three roles: Maintainer, Committer, and Contributor. The standard definitions for each role are as follows. ","version":"Next","tagName":"h2"},{"title":"Maintainer​","type":1,"pageTitle":"Developers","url":"/en-us/docs/developers/developers_dev#maintainer","content":"Maintainer is an individual who has made a significant contribution to the evolution and development of the Higress project, including projects under the Higress group. Specifically includes the following criteria: Completing the design and development of multiple key modules or projects, is an core developer of the project.Continuous investment and passion, can actively participate in the maintenance of related matters such as community, official website, issue, PR, etc.Has a visible influence in the community and is able to represent Higress in important community meetings and events.Have the consciousness and ability to cultivate Committer and Contributor. ","version":"Next","tagName":"h3"},{"title":"Committer​","type":1,"pageTitle":"Developers","url":"/en-us/docs/developers/developers_dev#committer","content":"Committer is an individual with write access to the Higress repository and includes the following criteria: An individual who can contribute to the issue and PR continuously for a long time.Participate in the maintenance of the issue list and discussion of important features.Participate in code review. ","version":"Next","tagName":"h3"},{"title":"Contributor​","type":1,"pageTitle":"Developers","url":"/en-us/docs/developers/developers_dev#contributor","content":"Contributor is an individual who contributes to the Higress project. The standard is: Submitted a PR that is merged. ","version":"Next","tagName":"h3"},{"title":"Test coverage guide","type":0,"sectionRef":"#","url":"/en-us/docs/developers/contributor-guide/test-coverage-guide_dev","content":"","keywords":"Higress coverage","version":"Next"},{"title":"How to divide test granularity​","type":1,"pageTitle":"Test coverage guide","url":"/en-us/docs/developers/contributor-guide/test-coverage-guide_dev#how-to-divide-test-granularity","content":" How to divide test granularity is a big problem. Chris Richardson has divided unit test, integration test, component test and end-to-end test for services test in &quot;[Descending the Testing Pyramid: Effective Testing Strategies for Microservices](https://microservices.io/microservices/testing/2019/09/20/oracle-code-one-testing.html)&quot;. We can use it for reference in the process of designing test cases. ","version":"Next","tagName":"h2"},{"title":"Unit Test​","type":1,"pageTitle":"Test coverage guide","url":"/en-us/docs/developers/contributor-guide/test-coverage-guide_dev#unit-test","content":"","version":"Next","tagName":"h2"},{"title":"1.The benefits of unit testing​","type":1,"pageTitle":"Test coverage guide","url":"/en-us/docs/developers/contributor-guide/test-coverage-guide_dev#1the-benefits-of-unit-testing","content":"Unit test code can help everyone to go into details and understand the function of the code.We can find bugs by test case, and then enhance the robustness of the code.Test case code is also the demo usage of the core code. ","version":"Next","tagName":"h3"},{"title":"2.Some design principle of unit test case​","type":1,"pageTitle":"Test coverage guide","url":"/en-us/docs/developers/contributor-guide/test-coverage-guide_dev#2some-design-principle-of-unit-test-case","content":"Steps, fine-grained and combination conditions should be well designed.Attention to boundary condition testTest code should also be designed without writing useless code.When you find a method that is hard to write unit test, if you can be sure the method is &quot;smelly code&quot;, then refactor it with the committer.The mock framework in higress is: mockito. Some tutorials:[mockito tutorial](http://www.baeldung.com/bdd-mockito),mockito refcardTDD（optional）：When you start a new issue, you can try to write test case at first  ","version":"Next","tagName":"h3"},{"title":"3.The specified value of the test coverage​","type":1,"pageTitle":"Test coverage guide","url":"/en-us/docs/developers/contributor-guide/test-coverage-guide_dev#3the-specified-value-of-the-test-coverage","content":"In the stage, the test coverage specified value of delta changed codes is ：&gt;=80%. The higher, the better.We can see the coverage report in this page: https://codecov.io/gh/alibaba/higress ","version":"Next","tagName":"h3"},{"title":"4.Project agreement​","type":1,"pageTitle":"Test coverage guide","url":"/en-us/docs/developers/contributor-guide/test-coverage-guide_dev#4project-agreement","content":"The unit test cases of the Higress project are distributed in each sub module of the project, and the test assertion class ends with Test. ","version":"Next","tagName":"h3"},{"title":"Integration test​","type":1,"pageTitle":"Test coverage guide","url":"/en-us/docs/developers/contributor-guide/test-coverage-guide_dev#integration-test","content":"","version":"Next","tagName":"h2"},{"title":"Project agreement​","type":1,"pageTitle":"Test coverage guide","url":"/en-us/docs/developers/contributor-guide/test-coverage-guide_dev#project-agreement","content":"Integration test in this project generally refers to the test above unit test level.This project use github actions、jiblib maven plugin、fabric maven plugin、testContainers to build Docker images，and build integration test environment Different from unit test, if a test case needs to rely on the third-party middleware, you can use the above tools to build the docker environment and test without mock. But also pay attention to the granularity of building components. For an overly complex environment, you can: the middleware on which the core test depends can be built by docker, and the middleware on which the core test depends can be mockedThe integration test cases of the Higress project are uniformly placed in the integration-test sub module, and the test assertion class ends with IT.Junit5 is used hereIn the process of parallel running of test cases, pay attention to the isolation state of common middleware, plan the test data and prevent conflicts. ","version":"Next","tagName":"h3"},{"title":"Reporting Security Issues","type":0,"sectionRef":"#","url":"/en-us/docs/developers/contributor-guide/reporting-security-issues_dev","content":"","keywords":"Higress contributor","version":"Next"},{"title":"REPORTING VULNERABILITY​","type":1,"pageTitle":"Reporting Security Issues","url":"/en-us/docs/developers/contributor-guide/reporting-security-issues_dev#reporting-vulnerability","content":"If you have apprehensions regarding Higress's security or you discover vulnerability or potential threat, don’t hesitate to get in touch with the Higress Security Team by dropping a mail at [higress@googlegroups.com](mailto:higress@googlegroups.com). In the mail, specify the description of the issue or potential threat. You are also urged to recommend the way to reproduce and replicate the issue. The Higress community will get back to you after assessing and analysing the findings. PLEASE PAY ATTENTION to report the security issue on the security email before disclosing it on public domain. ","version":"Next","tagName":"h2"},{"title":"VULNERABILITY HANDLING​","type":1,"pageTitle":"Reporting Security Issues","url":"/en-us/docs/developers/contributor-guide/reporting-security-issues_dev#vulnerability-handling","content":"An overview of the vulnerability handling process is: The reporter reports the vulnerability privately to Apache.The appropriate project's security team works privately with the reporter to resolve the vulnerability.A new release of the Apache product concerned is made that includes the fix.The vulnerability is publically announced. ","version":"Next","tagName":"h2"},{"title":"Deploy Higress with Docker Compose","type":0,"sectionRef":"#","url":"/en-us/docs/ops/deploy-by-docker-compose","content":"Deploy Higress with Docker Compose TBD","keywords":"deploy docker compose docker ops","version":"Next"},{"title":"Contributing to Higress","type":0,"sectionRef":"#","url":"/en-us/docs/developers/guide_dev","content":"","keywords":"Higress","version":"Next"},{"title":"Topics​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#topics","content":"Contributing to Higress TopicsReporting security issuesReporting general issuesCode and doc contribution Workspace PreparationBranch DefinitionCommit Rules Commit MessageCommit Content PR Description Test case contributionEngage to help anythingCode Style GuidelinesIDE Plugin Install（not necessary） idea IDEeclipse IDE ","version":"Next","tagName":"h2"},{"title":"Reporting security issues​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#reporting-security-issues","content":"Security issues are always treated seriously. As our usual principle, we discourage anyone to spread security issues. If you find a security issue of Higress, please do not discuss it in public and even do not open a public issue. Instead we encourage you to send us a private email to [higress@googlegroups.com](mailto:higress@googlegroups. com) to report this. ","version":"Next","tagName":"h2"},{"title":"Reporting general issues​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#reporting-general-issues","content":"To be honest, we regard every user of Higress as a very kind contributor. After experiencing Higress, you may have some feedback for the project. Then feel free to open an issue via NEW ISSUE. Since we collaborate project Higress in a distributed way, we appreciate WELL-WRITTEN, DETAILED, EXPLICIT issue reports. To make the communication more efficient, we wish everyone could search if your issue is an existing one in the searching list. If you find it existing, please add your details in comments under the existing issue instead of opening a brand new one. To make the issue details as standard as possible, we setup an ISSUE TEMPLATE for issue reporters. Please BE SURE to follow the instructions to fill fields in template. There are a lot of cases when you could open an issue: bug reportfeature requestperformance issuesfeature proposalfeature designhelp wanteddoc incompletetest improvementany questions on projectand so on Also we must remind that when filling a new issue, please remember to remove the sensitive data from your post. Sensitive data could be password, secret key, network locations, private business data and so on. ","version":"Next","tagName":"h2"},{"title":"Code and doc contribution​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#code-and-doc-contribution","content":"Every action to make project Higress better is encouraged. On GitHub, every improvement for Higress could be via a PR (short for pull request). If you find a typo, try to fix it!If you find a bug, try to fix it!If you find some redundant codes, try to remove them!If you find some test cases missing, try to add them!If you could enhance a feature, please DO NOT hesitate!If you find code implicit, try to add comments to make it clear!If you find code ugly, try to refactor that!If you can help to improve documents, it could not be better!If you find document incorrect, just do it and fix that!... Actually it is impossible to list them completely. Just remember one principle: WE ARE LOOKING FORWARD TO ANY PR FROM YOU. Since you are ready to improve Higress with a PR, we suggest you could take a look at the PR rules here. Workspace PreparationBranch DefinitionCommit RulesPR Description ","version":"Next","tagName":"h2"},{"title":"Workspace Preparation​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#workspace-preparation","content":"To put forward a PR, we assume you have registered a GitHub ID. Then you could finish the preparation in the following steps: FORK Higress to your repository. To make this work, you just need to click the button Fork in right-left ofalibaba/higress main page. Then you will end up with your repository in https://github.com/&lt;your-username&gt;/higress, in which your-username is your GitHub username. CLONE your own repository to develop locally. Use git clone git@github.com:&lt;your-username&gt;/higress.git to clone repository to your local machine. Then you can create new branches to finish the change you wish to make. Set Remote upstream to be git@github.com:alibaba/higress.git using the following two commands: git remote add upstream git@github.com:alibaba/higress.git git remote set-url --push upstream no-pushing  With this remote setting, you can check your git remote configuration like this: $ git remote -v origin git@github.com:&lt;your-username&gt;/higress.git (fetch) origin git@github.com:&lt;your-username&gt;/higress.git (push) upstream git@github.com:alibaba/higress.git (fetch) upstream no-pushing (push)  Adding this, we can easily synchronize local branches with upstream branches. ","version":"Next","tagName":"h3"},{"title":"Branch Definition​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#branch-definition","content":"Right now we assume every contribution via pull request is for [branch main](https://github.com/alibaba/higress/tree/main) in Higress. Before contributing, be aware of branch definition would help a lot. As a contributor, keep in mind again that every contribution via pull request is for branch main. While in project Higress, there are several other branches, we generally call them release branches (such as 0.6.0,0.6.1), feature branches, hotfix branches. When officially releasing a version, there will be a release branch and named with the version number. After the release, we will merge the commit of the release branch into the main branch. When we find that there is a bug in a certain version, we will decide to fix it in a later version or fix it in a specific hotfix version. When we decide to fix the hotfix version, we will checkout the hotfix branch based on the corresponding release branch, perform code repair and verification, and merge it into the main branch. For larger features, we will pull out the feature branch for development and verification. ","version":"Next","tagName":"h3"},{"title":"Commit Rules​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#commit-rules","content":"Actually in Higress, we take two rules serious when committing: Commit MessageCommit Content Commit Message​ Commit message could help reviewers better understand what is the purpose of submitted PR. It could help accelerate the code review procedure as well. We encourage contributors to use EXPLICIT commit message rather than ambiguous message. In general, we advocate the following commit message type: docs: xxxx. For example, &quot;docs: add docs about Higress cluster installation&quot;.feature: xxxx.For example, &quot;feature: support oracle in AT mode&quot;.bugfix: xxxx. For example, &quot;bugfix: fix panic when input nil parameter&quot;.refactor: xxxx. For example, &quot;refactor: simplify to make codes more readable&quot;.test: xxx. For example, &quot;test: add unit test case for func InsertIntoArray&quot;.other readable and explicit expression ways. On the other side, we discourage contributors from committing message like the following ways: fix bugupdateadd doc If you get lost, please see How to Write a Git Commit Message for a start. Commit Content​ Commit content represents all content changes included in one commit. We had better include things in one single commit which could support reviewer's complete review without any other commits' help. In another word, contents in one single commit can pass the CI to avoid code mess. In brief, there are three minor rules for us to keep in mind: avoid very large change in a commit;complete and reviewable for each commit.check git config(user.name, user.email) when committing to ensure that it is associated with your github ID. In addition, in the code change part, we suggest that all contributors should read the code style of Higress. No matter commit message, or commit content, we do take more emphasis on code review. ","version":"Next","tagName":"h3"},{"title":"PR Description​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#pr-description","content":"PR is the only way to make change to Higress project files. To help reviewers better get your purpose, PR description could not be too detailed. We encourage contributors to follow the PR template to finish the pull request. ","version":"Next","tagName":"h3"},{"title":"Test case contribution​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#test-case-contribution","content":"Any test case would be welcomed. Currently, Higress function test cases are high priority. For unit test, you need to create a test file named xxxTest.java in the test directory of the same module. Recommend you to use the junit5 UT framework For integration test, you can put the integration test in the test directory or the higress-test module. It is recommended to use the mockito test framework. ","version":"Next","tagName":"h2"},{"title":"Engage to help anything​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#engage-to-help-anything","content":"We choose GitHub as the primary place for Higress to collaborate. So the latest updates of Higress are always here. Although contributions via PR is an explicit way to help, we still call for any other ways. reply to other's issues if you could;help solve other user's problems;help review other's PR design;help review other's codes in PR;discuss about Higress to make things clearer;advocate Higress technology beyond GitHub;write blogs on Higress and so on. ","version":"Next","tagName":"h2"},{"title":"Code Style​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#code-style","content":"Higress code style Comply with Alibaba Java Coding Guidelines. ","version":"Next","tagName":"h2"},{"title":"Guidelines​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#guidelines","content":"Alibaba-Java-Coding-Guidelines ","version":"Next","tagName":"h3"},{"title":"IDE Plugin Install（not necessary）​","type":1,"pageTitle":"Contributing to Higress","url":"/en-us/docs/developers/guide_dev#ide-plugin-installnot-necessary","content":"It is not necessary to install, if you want to find a problem when you are coding. idea IDE​ p3c-idea-plugin-install eclipse IDE​ p3c-eclipse-plugin-install In a word, ANY HELP IS CONTRIBUTION. ","version":"Next","tagName":"h3"},{"title":"hgctl","type":0,"sectionRef":"#","url":"/en-us/docs/ops/hgctl","content":"hgctl older. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Deploy Higress by Helm","type":0,"sectionRef":"#","url":"/en-us/docs/ops/deploy-by-helm","content":"","keywords":"deploy helm kubernetes k8s ops","version":"Next"},{"title":"Install Higress​","type":1,"pageTitle":"Deploy Higress by Helm","url":"/en-us/docs/ops/deploy-by-helm#install-higress","content":"Higress Gateway consists of a control plane component higress-controller and a data plane component higress-gateway. It uses Istio to management API configurations of the data plane, and higress-controller to manage API configurations of the control plane. ","version":"Next","tagName":"h2"},{"title":"Helm Installation Command​","type":1,"pageTitle":"Deploy Higress by Helm","url":"/en-us/docs/ops/deploy-by-helm#helm-installation-command","content":"helm repo add higress.io https://higress.io/helm-charts helm install higress higress.io/higress -n higress-system --create-namespace  ","version":"Next","tagName":"h3"},{"title":"Installation Parameters​","type":1,"pageTitle":"Deploy Higress by Helm","url":"/en-us/docs/ops/deploy-by-helm#installation-parameters","content":"Parameter\tDescription\tDefaultGlobal Parameters global.local\tSet to true if installing to a local K8s cluster (e.g.: Kind, Rancher Desktop, etc.)\tfalse global.ingressClass\tIngressClass which is used to filter Ingress resources Higress Controller watches. If there are multiple gateway instances deployed in the cluster, this parameter can be used to distinguish the scope of each gateway instance. There are some special cases for special IngressClass values: 1. If set to &quot;nginx&quot;, Higress Controller will watch Ingress resources with the nginx IngressClass or without any Ingress class. 2. If set to empty, Higress Controller will watch all Ingress resources in the K8s cluster.\thigress global.watchNamespace\tIf not empty, Higress Controller will only watch resources in the specified namespace. When isolating different business systems using K8s namespace, if each namespace requires a standalone gateway instance, this parameter can be used to confine the Ingress watching of Higress within the given namespace.\t&quot;&quot; global.disableAlpnH2\tWhether to disable HTTP/2 in ALPN\ttrue global.enableStatus\tIf true, Higress Controller will update the status field of Ingress resources. When migrating from Nginx Ingress, in order to avoid status field of Ingress objects being overwritten, this parameter needs to be set to false, so Higress won't write the entry IP to the status field of the corresponding Ingress object.\ttrue global.enableIstioAPI\tIf true, Higress Controller will monitor istio resources as well\tfalse global.istioNamespace\tThe namespace istio is installed to\tistio-system global.o11y.enabled\tIf true, o11y suite (Grafana + Promethues) will be installed.\tfalse global.pvc.rwxSupported\tSet to false when installing to a standard K8s cluster and the target cluster doesn't support the ReadWriteMany access mode of PersistentVolumeClaim.\ttrue Core Paramters higress-core.gateway.replicas\tNumber of Higress Gateway pods\t2 higress-core.controller.replicas\tNumber of Higress Controller pods\t1 Console Paramters higress-console.replicaCount\tNumber of Higress Console pods\t1 higress-console.service.type\tK8s service type used by Higress Console\tClusterIP higress-console.web.login.prompt\tPrompt message to be displayed on the login page\t&quot;&quot; ","version":"Next","tagName":"h3"},{"title":"Support Istio CRD​","type":1,"pageTitle":"Deploy Higress by Helm","url":"/en-us/docs/ops/deploy-by-helm#support-istio-crd","content":"The CRD of Istio needs to be installed in advance in the cluster. If you do not want to install Istio, you can also install only the CRD of Istio: helm repo add istio https://istio-release.storage.googleapis.com/charts helm install istio-base istio/base -n istio-system  In this mode, you need to update the deployment parameters of Higress: helm upgrade higress -n higress-system --set global.enableIstioAPI=true higress.io/higress  ","version":"Next","tagName":"h2"},{"title":"Modify gateway ports","type":0,"sectionRef":"#","url":"/en-us/docs/ops/how-tos/gateway-ports","content":"Modify gateway ports TBD","keywords":"ops config route tcp","version":"Next"},{"title":"Configure a route with gRPC upstream","type":0,"sectionRef":"#","url":"/en-us/docs/ops/how-tos/grpc-upstream","content":"Configure a route with gRPC upstream TBD","keywords":"ops config route upstream grpc","version":"Next"},{"title":"Configure a route with HTTP upstream","type":0,"sectionRef":"#","url":"/en-us/docs/ops/how-tos/https-upstream","content":"Configure a route with HTTP upstream TBD","keywords":"ops config route upstream https","version":"Next"},{"title":"Configure a TCP route","type":0,"sectionRef":"#","url":"/en-us/docs/ops/how-tos/tcp-route","content":"Configure a TCP route TBD","keywords":"ops config route tcp","version":"Next"},{"title":"Log","type":0,"sectionRef":"#","url":"/en-us/docs/ops/log","content":"Log TBD","keywords":"higress log","version":"Next"},{"title":"Upgrade","type":0,"sectionRef":"#","url":"/en-us/docs/ops/upgrade","content":"","keywords":"Higress","version":"Next"},{"title":"Cloud-Native Deployment​","type":1,"pageTitle":"Upgrade","url":"/en-us/docs/ops/upgrade#cloud-native-deployment","content":"","version":"Next","tagName":"h2"},{"title":"Upgrade via Helm​","type":1,"pageTitle":"Upgrade","url":"/en-us/docs/ops/upgrade#upgrade-via-helm","content":"# Sample value of ${higress_version} : v1.1.0 kubectl apply -f https://github.com/alibaba/higress/releases/download/${higress_version}/customresourcedefinitions.gen.yaml helm repo update helm upgrade higress -n higress-system higress.io/higress  ","version":"Next","tagName":"h3"},{"title":"Standalone Deployment​","type":1,"pageTitle":"Upgrade","url":"/en-us/docs/ops/upgrade#standalone-deployment","content":"# ${higress_dir} is the path of Higress' installation directory curl -fsSL https://higress.io/standalone/get-higress.sh | bash -s -- &quot;${higress_dir}&quot; -u  ","version":"Next","tagName":"h2"},{"title":"Roadmap","type":0,"sectionRef":"#","url":"/en-us/docs/overview/roadmap","content":"Roadmap Version number\tCore goal\tEstimated release timev0.6.0\tThe black screen operation (kubectl) under K8s has reached GA status; the preview version of the console is released to improve the ease of installation and deployment\t2023-01 v0.7.0\tThe official version of the console is released, integrating observables out of the box\t2023-02 v1.0.0\tOverall reached GA status\t2023-05 v1.1.0\tEnhance the microservice gateway related capabilities in the console function; support installation and deployment under non-K8s\t2023-07 v1.2.0\tSupports use as the network layer of Knative; supports ARM architecture deployment; supports docking with Consul\t2023-08 v1.3.0\tFully support GatewayAPI; support Operator mode deployment\t2023-09 v1.4.0\tLaunched WASM Plugin Marketplace\t2023-10","keywords":"Higress roadmap","version":"Next"},{"title":"What Is Higress?","type":0,"sectionRef":"#","url":"/en-us/docs/overview/what-is-higress","content":"","keywords":"Higress","version":"Next"},{"title":"Classification of traditional gateways​","type":1,"pageTitle":"What Is Higress?","url":"/en-us/docs/overview/what-is-higress#classification-of-traditional-gateways","content":"In the industry, gateways are usually divided into two categories: traffic gateways and business gateways. Traffic gateways mainly provide global policy configurations that have nothing to do with back-end business. For example, Ali’s internal unified access gateway Tengine is a typical traffic gateway. As the name suggests, the business gateway mainly provides independent business domain-level, tightly coupled policy configuration with the back-end business. With the evolution of the application architecture model from a single body to the current distributed micro-service, the business gateway also has a new name - micro-service gateway ( Illustrations are shown below). In the current cloud-native era dominated by container technology and K8s, is the next-generation gateway model still the same? ","version":"Next","tagName":"h2"},{"title":"Positioning​","type":1,"pageTitle":"What Is Higress?","url":"/en-us/docs/overview/what-is-higress#positioning","content":"Under the microservice architecture in the virtualization era, the business usually adopts a two-tier architecture of traffic gateway + microservice gateway. The traffic gateway is responsible for north-south traffic scheduling and security protection, and the microservice gateway is responsible for east-west traffic scheduling and service governance. In the cloud-native era dominated by K8s, Ingress has become the gateway standard of the K8s ecosystem, endowing the gateway with a new mission and making it possible to combine traffic gateway + microservice gateway into one. As a north-south public network gateway, it is a common requirement to use Waf to protect abnormal traffic. As the Internet environment becomes more and more complex, users' demands for protection continue to increase. The conventional method is to access the traffic first. The Waf security gateway, after filtering, forwards the traffic to the traffic gateway, and finally reaches the microservice gateway; Higress hopes that through the built-in Waf module, the user's request link can be simultaneously completed Waf protection, traffic distribution, and microservice governance only through Higress. It can improve the link RT and reduce the operation and maintenance complexity of the gateway. Therefore, Higress realizes the high integration capability of three-in-one traffic gateway + microservice gateway + security gateway. ","version":"Next","tagName":"h2"},{"title":"Why did Higress choose Envoy/Istio as the engine​","type":1,"pageTitle":"What Is Higress?","url":"/en-us/docs/overview/what-is-higress#why-did-higress-choose-envoyistio-as-the-engine","content":"In the context of containerized cloud native, Kubernetes has become a standard interface between infrastructure and upper-layer applications. The natural internal and external network isolation environment of Kubernetes clusters requires external traffic to enter the Kubernetes cluster through an ingress gateway. Therefore, Kubernetes is standardized through Ingress The definition and standard of the ingress gateway. Although the Ingress standard has some shortcomings such as weak routing expression ability, the community has been actively promoting the definition of the Gateway API standard to solve it. However, it is undeniable that the Ingress standard still occupies the mainstream. CNCF annual report The usage of Ingress Provider (the implementers of the Ingress standard are collectively referred to as Ingress Provider) is also counted separately. Although Nginx Ingress still occupies the top spot of K8s Ingress Provider, Envoy has the fastest growth, from less than 20% in 2019 to 37% in 2020, and only after Nginx Ingress , the growth momentum is very rapid, which shows that choosing Envoy as the core is in line with the development trend of cloud native; and as Service Mesh is gradually recognized by the public, the system of Istio + Envoy can cover both the Mesh and Ingress fields at the same time, realizing a set of technical architecture The goal of dispatching east-west and north-south global traffic is also very meaningful to users. ","version":"Next","tagName":"h2"},{"title":"Higress practise inside Alibaba​","type":1,"pageTitle":"What Is Higress?","url":"/en-us/docs/overview/what-is-higress#higress-practise-inside-alibaba","content":"Higress was incubated from Alibaba's internal &quot;Local Life Campaign&quot; in May 2020. It was originally built to meet the demands of Alibaba Group and Ant Group to directly use RPC to request mutual visits, and the project also successfully incubated Dubbo 3.0's Triple Therefore, Higress is also the first internal application that supports the Triple protocol. In the same year, Higress also successfully supported major promotional activities such as Double 11 and Double 12. With the expansion of business scope, Higress has already supported Youku, DingTalk, For businesses such as Dharma Academy and Ant, the business scenarios have also been extended to global traffic scheduling in east-west and north-south directions. ","version":"Next","tagName":"h2"},{"title":"ai-cache","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/ai/ai-cache","content":"ai-cache Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Higress Terminology","type":0,"sectionRef":"#","url":"/en-us/docs/overview/terminology","content":"","keywords":"Higress","version":"Next"},{"title":"Ingress Annotation (Annotation)​","type":1,"pageTitle":"Higress Terminology","url":"/en-us/docs/overview/terminology#ingress-annotation-annotation","content":"The annotation (Annotation) field in the Ingress resource is a kv dictionary structure, which can implement various routing strategies in a declarative manner. As shown below, annotations are used to enable cross-domain access permission for the Ingress route: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: ingress-example annotations: higress.io/enable-cors: &quot;true&quot; spec: ingressClassName: nginx-example rules: - http: paths: - path: /test pathType: Prefix backend: service: name: test port: number: 80  For other annotation configuration methods supported by Higress, please refer to Ingress Annotation Configuration Instructions ","version":"Next","tagName":"h2"},{"title":"Downstream​","type":1,"pageTitle":"Higress Terminology","url":"/en-us/docs/overview/terminology#downstream","content":"Downstream refers to the source where Higress receives the request, usually a client such as a browser ","version":"Next","tagName":"h2"},{"title":"Upstream​","type":1,"pageTitle":"Higress Terminology","url":"/en-us/docs/overview/terminology#upstream","content":"Upstream refers to the target backend service that Higress forwards the request to ","version":"Next","tagName":"h2"},{"title":"FAQ","type":0,"sectionRef":"#","url":"/en-us/docs/overview/faq","content":"","keywords":"Higress","version":"Next"},{"title":"Q: Is Higress suitable for production system now? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#1","content":"A:It is recommended to upgrade to v1.0.0 and above For details, please refer to our Roadmap  ","version":"Next","tagName":"h3"},{"title":"Q: What is the difference between Higress and Envoy Gateway? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#2","content":"A:Higress is implemented and extended based on Envoy, and follows the Gateway API standard like Envoy Gateway. The difference is that it also provides: Waf protection, authentication and authentication and other security plug-in capabilitiesService management plug-in capabilities such as multiple registries, protocol conversion, and current limiting and downgrading. For example, for microservice users who traditionally use Dubbo, they want to use native RPC to expose external services, but usually the services that provide external access mainly use HTTP. To help Dubbo users reduce the development cost of service exposure, Higress provides the HTTP-to-Dubbo protocol function, and provides users with a white-screen configuration method through the Console. After using it, a customer reported that &quot;this is the industry's most complete HTTP-to-Dubbo protocol.&quot; Function.Support WASM, Lua and other custom plug-ins, such as Nginx users, we will also support out-of-process plug-ins to meet the demands of multi-language users, especially Java users who want to expand the gateway because the Java community's support for WebAssembly is not perfect at this stage demands.  ","version":"Next","tagName":"h3"},{"title":"Q: What are the differences between Higress and Tengine, another open source gateway of Alibaba? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#3","content":"A: Tengine is implemented based on Nginx, extended by Lua, and Higress is based on istio + Envoy, extended by WASM. The technical architecture is different, and developers can choose according to business scenarios. Higress already supports the ability of smooth migration of Nginx Ingress annotations, which meets the needs of some users who expect to migrate to Higress but do not want to reconfigure the gateway. Higress can be used as a unified access gateway while enjoying the bonus of Ingress.  ","version":"Next","tagName":"h3"},{"title":"Q: What is the relationship between the MSE cloud-native gateway on Higress Alibaba Cloud? Is it an open source project incubated based on this? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#4","content":"A: The MSE cloud-native gateway is a commercial version of Higress, with differences in capabilities, mainly reflected in performance, stability, ease of use, and security, because these are very dependent on the infrastructure capabilities on the cloud, and detailed resources are still available. After sorting, it will be displayed on the product page and document page of MSE in the future, which is convenient for everyone to choose. Of course, Higress is in the process of evolution. We will define with the community which capabilities on the MSE cloud-native gateway are open sourced, and we will also plan a plug-in market for open source.  ","version":"Next","tagName":"h3"},{"title":"Q: Higress combines traffic gateway, microservice gateway, and security gateway into one. Is this practice common in the industry? Is it a trend? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#5","content":"A: Traffic gateways, microservice gateways, and security gateways have always been used in the industry. Most of the deployment forms use independent cluster deployments. In the context of K8s-led containerization, K8s standardized ingress gateways through Ingress. Traditional traffic gateways, microservices The independent deployment mode of gateway and security gateway appears to be high in deployment cost and complicated in operation and maintenance under K8s. From the perspective of users, only a highly integrated gateway with rich functions is enough. Based on this, we judge that highly integrated gateway will be a future development trend.  ","version":"Next","tagName":"h3"},{"title":"Q: Higress has customized the upstream. Is there a problem of not being able to enjoy community benefits and being burdened with ecological follow-up? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#6","content":"A: The Higress core code basically adopts pluggable Filter extensions, and new functions also follow the principle of scalability as much as possible. In order to maintain its own stability in the upstream follow-up, it will not immediately follow up with the latest version. For example, APISIX and Kong kernels are based on Nginx , but they are still developing very well, and the facts also show that upstream follow-up will not become an obstacle to project development.  ","version":"Next","tagName":"h3"},{"title":"Q: Higress supports Nacos service discovery, is there any plan to support Consul? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#7","content":"A: Expected to be available in version 1.2.0  ","version":"Next","tagName":"h3"},{"title":"Q: Does Higress have an offline deployment version? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#8","content":"A: There is no existing one, you need to build it yourself. Currently, all Docker images are provided and can be pulled and used by yourself.  ","version":"Next","tagName":"h3"},{"title":"Q: Can Higress be separated from the istio environment and run only based on Docker? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#9","content":"A: Already supported, you can see it here: https://higress.io/en-us/docs/user/quickstart#environment-2-use-in-docker-compose-without-k8s  ","version":"Next","tagName":"h3"},{"title":"Q: In addition to running on K8s, does Higress support running on virtual machines and physical machines? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#10","content":"A: Not yet supported, open source will use Nacos for configuration management to support this requirement. You can also consider using [Higress Enterprise Edition] (https://www.aliyun.com/product/aliware/mse?spm=higress-website.topbar.0.0.0), this mode Higress is fully managed, no need to care about Higress Deployment and operation and maintenance, can directly connect to the back-end services deployed on virtual machines and physical machines.  ","version":"Next","tagName":"h3"},{"title":"Q: Will Higress Dashboard be open source? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#11","content":"A: Already open source: https://github.com/higress-group/higress-console  ","version":"Next","tagName":"h3"},{"title":"Q: Does the current open source version support the Waf function, and is there any relevant best practice? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#12","content":"A: Supported, you can read this document: https://higress.io/zh-cn/docs/user/waf/  ","version":"Next","tagName":"h3"},{"title":"Q: Does Higress support auto-scaling, and is the gateway stateless? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#13","content":"A: Higress is based on K8s HPA and supports elastic scaling. The gateway is stateless and is a deployment.  ","version":"Next","tagName":"h3"},{"title":"Q: Does Higress have a roadmap? ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#14","content":"A: Please refer to Roadmap  ","version":"Next","tagName":"h3"},{"title":"Q: How to join the Higress community to contribute, I can't wait ​","type":1,"pageTitle":"FAQ","url":"/en-us/docs/overview/faq#15","content":"A: We welcome everyone to participate in the construction of our project in various forms, including but not limited to: Architecture designModular designCodeBug FixesDemo sampleDocumentation, websites and translations For details on how to participate, please refer to Developer Guide on our official website or contact higress@googlegroups.com.In fact, we are not limited to the form of contribution. Every issue raised by a developer, whether it is a Bug Report, improvement suggestion or even a question consultation, represents attention and help to the project. I hope that the Higress project will grow healthily with the community and become an excellent solution in the field of cloud-native gateways.  ","version":"Next","tagName":"h3"},{"title":"ai-prompt-template","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/ai/ai-prompt-template","content":"ai-prompt-template Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"ai-proxy","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/ai/ai-proxy","content":"ai-proxy Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"ai-prompt-decorator","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/ai/ai-prompt-decorator","content":"ai-prompt-decorator Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"ai-security-guard","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/ai/ai-security-guard","content":"ai-security-guard Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"ai-statistics","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/ai/ai-statistics","content":"ai-statistics Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"ai-token-ratelimit","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/ai/ai-token-ratelimit","content":"ai-token-ratelimit Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"ai-transformer","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/ai/ai-transformer","content":"ai-transformer Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"ai-rag","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/ai/ai-rag","content":"ai-rag Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Basic Auth","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/authentication/basic-auth","content":"","keywords":"higress basic auth","version":"Next"},{"title":"Description​","type":1,"pageTitle":"Basic Auth","url":"/en-us/docs/plugins/authentication/basic-auth#description","content":"basic-auth plugin implements the function of authentication based on the HTTP Basic Auth standard. ","version":"Next","tagName":"h2"},{"title":"Configuration Fields​","type":1,"pageTitle":"Basic Auth","url":"/en-us/docs/plugins/authentication/basic-auth#configuration-fields","content":"Name\tType\tRequirement\tDefault Value\tDescriptionconsumers\tarray of object\tRequired\t-\tCaller of the service for authentication of requests _rules_\tarray of object\tOptional\t-\tConfigure access permission list for specific routes or domains to authenticate requests Filed descriptions of consumers items: Name\tType\tRequirement\tDefault Value\tDescriptioncredential\tstring\tRequired\t-\tCredential for this consumer's access name\tstring\tRequired\t-\tName of this consumer Configuration field descriptions for each item in _rules_ are as follows: Field Name\tData Type\tRequirement\tDefault\tDescription_match_route_\tarray of string\tOne of _match_route_ or _match_domain_\t-\tConfigure the routes to match for request authorization _match_domain_\tarray of string\tOne of _match_route_ , _match_domain_\t-\tConfigure the domains to match for request authorization allow\tarray of string\tRequired\t-\tConfigure the consumer names allowed to access requests that match the match condition Note: If the _rules_ field is not configured, authentication is enabled for all routes of the current gateway instance by default;For authenticated requests, X-Mse-Consumer field will be added to the request header to identify the name of the caller. ","version":"Next","tagName":"h2"},{"title":"Configuration Samples​","type":1,"pageTitle":"Basic Auth","url":"/en-us/docs/plugins/authentication/basic-auth#configuration-samples","content":"","version":"Next","tagName":"h2"},{"title":"Enable Authentication and Authorization for specific routes or domains​","type":1,"pageTitle":"Basic Auth","url":"/en-us/docs/plugins/authentication/basic-auth#enable-authentication-and-authorization-for-specific-routes-or-domains","content":"The following configuration will enable Basic Auth authentication and authorization for specific routes or domains of the gateway. Note that the username and password in the credential information are separated by a &quot;:&quot;, and the credential field cannot be repeated. # use the _rules_ field for fine-grained rule configuration. consumers: - credential: 'admin:123456' name: consumer1 - credential: 'guest:abc' name: consumer2 _rules_: # rule 1: match by the route name. - _match_route_: - route-a - route-b allow: - consumer1 # rule 2: match by the domain. - _match_domain_: - &quot;*.example.com&quot; - test.com allow: - consumer2  In this sample, route-a and route-b specified in _match_route_ are the route names filled in when creating gateway routes. When these two routes are matched, the caller with name as consumer1 is allowed to access, and other callers are not allowed to access. The *.example.com and test.com specified in _match_domain_ are used to match the domain name of the request. When the domain name is matched, the caller with name as consumer2 is allowed to access, and other callers are not allowed to access. According to this configuration, the following requests are allowed:​ Requests with specified username and password # Assuming the following request will match with route-a # Use -u option of curl to specify the credentials curl -u admin:123456 http://xxx.hello.com/test # Or specify the Authorization request header directly with the credentials in base64 encoding curl -H 'Authorization: Basic YWRtaW46MTIzNDU2' http://xxx.hello.com/test  A X-Mse-Consumer field will be added to the headers of the request, and its value in this example is consumer1, used to identify the name of the caller when passed authentication and authorization. The following requests will be denied:​ Requests without providing username and password, returning 401 curl http://xxx.hello.com/test  Requests with incorrect username or password, returning 401 curl -u admin:abc http://xxx.hello.com/test  Requests matched with a caller who has no access permission, returning 403 # consumer2 is not in the allow list of route-a curl -u guest:abc http://xxx.hello.com/test  ","version":"Next","tagName":"h3"},{"title":"Enable basic auth for gateway instance​","type":1,"pageTitle":"Basic Auth","url":"/en-us/docs/plugins/authentication/basic-auth#enable-basic-auth-for-gateway-instance","content":"The following configuration does not specify the _rules_ field, so Basic Auth authentication will be effective for the whole gateway instance. consumers: - credential: 'admin:123456' name: consumer1 - credential: 'guest:abc' name: consumer2  ","version":"Next","tagName":"h3"},{"title":"Error Codes​","type":1,"pageTitle":"Basic Auth","url":"/en-us/docs/plugins/authentication/basic-auth#error-codes","content":"HTTP Status Code\tError Info\tReason401\tRequest denied by Basic Auth check. No Basic Authentication information found.\tCredentials not provided in the request 401\tRequest denied by Basic Auth check. Invalid username and/or password\tInvalid username and/or password 403\tRequest denied by Basic Auth check. Unauthorized consumer\tUnauthorized consumer ","version":"Next","tagName":"h2"},{"title":"HMAC authentication","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/authentication/hmac-auth","content":"","keywords":"higress hmac","version":"Next"},{"title":"Function Description​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#function-description","content":"The hmac-auth plugin implements the generation of tamper-proof signatures for HTTP requests based on HMAC algorithm, and uses the signature for identity authentication and authorization. ","version":"Next","tagName":"h2"},{"title":"Configuration Fields​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#configuration-fields","content":"Name\tData Type\tRequired\tDefault\tDescriptionconsumers\tarray of object\tRequired\t-\tConfigures the caller of the service to authenticate the request. date_offset\tnumber\tOptional\t-\tConfigures the maximum allowed time deviation of the client, in seconds. It is used to parse the client's UTC time from the Date header of the request, and can be used to prevent replay attacks. If not configured, no validation is performed. _rules_\tarray of object\tOptional\t-\tConfigures the access control list for specific routes or domains, used for authorization of requests. The configuration fields for each item in consumers are as follows : Name\tData Type\tRequired\tDefault\tDescriptionkey\tstring\tRequired\t-\tConfigures the key extracted from the x-ca-key header of the request. secret\tstring\tRequired\t-\tConfigures the secret used to generate the signature. name\tstring\tRequired\t-\tConfigures the name of the consumer. The configuration fields for each item in _rules_ are as follows: Name\tData Type\tRequired\tDefault\tDescription_match_route_\tarray of string\tOptional, either _match_route_ or _match_domain_ must be provided\t-\tConfigures the name of the route to match. _match_domain_\tarray of string\tOptional, either _match_route_ or _match_domain_ must be provided\t-\tConfigures the name of the domain to match. allow\tarray of string\tRequired\t-\tConfigures the name of the consumer to allow for requests that match the specified route or domain. Note： If _rules_ is not configured, authentication is enabled for all routes on the current gateway instance by default ；For requests that pass authentication and authorization, a X-Mse-Consumer header will be added to the request headers to identify the name of the consumer. ","version":"Next","tagName":"h2"},{"title":"Configuration Example​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#configuration-example","content":"The following configuration enables Hmac Auth authentication and authorization for specific routes or domains on the gateway. Note that the key field should not be duplicated. ","version":"Next","tagName":"h2"},{"title":"Enabling for specific routes or domains​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#enabling-for-specific-routes-or-domains","content":"consumers: - key: appKey-example-1 secret: appSecret-example-1 name: consumer-1 - key: appKey-example-2 secret: appSecret-example-2 name: consumer-2 # Configuring Fine-Grained Rules using _rules_ Field _rules_: # Rule 1: Matching by route name. - _match_route_: - route-a - route-b allow: - consumer-1 # Rule 2: Applies based on domain name matching. - _match_domain_: - &quot;*.example.com&quot; - test.com allow: - consumer-2  The allow field under each matching rule specifies the list of callers allowed to access under that matching condition; In this example, route-a and route-b specified in _match_route_ are the route names filled in when creating the gateway route. When either of these routes is matched, it will allow access to the caller named consumer-1, while denying access to other callers； In _match_domain_, *.example.com and test.com are used to match the requested domain name. When a match is found, it will allow access to the caller named consumer-2, while denying access to other callers； Upon successful authentication, the X-Mse-Consumer field will be added to the request header with the value set to the caller's name, such as consumer-1.。 ","version":"Next","tagName":"h3"},{"title":"Enable at the Gateway Instance Level​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#enable-at-the-gateway-instance-level","content":"The following configuration enables HMAC authentication at the gateway instance level. consumers: - key: appKey-example-1 secret: appSecret-example-1 name: consumer-1 - key: appKey-example-2 secret: appSecret-example-2 name: consumer-2  ","version":"Next","tagName":"h3"},{"title":"Description of Signing Mechanism​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#description-of-signing-mechanism","content":"","version":"Next","tagName":"h2"},{"title":"Configuration Preparation​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#configuration-preparation","content":"As mentioned in the guide above, configure the credential settings required for generating and validating signatures in the plugin configuration. key: Used for setting in the request header x-ca-key.secret: Used for generating the request signature. ","version":"Next","tagName":"h3"},{"title":"Client Signature Generation Method​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#client-signature-generation-method","content":"Overview of the Process​ The process for generating a signature on the client side consists of three steps: Extracting key data from the original request to obtain a string to be signed. Using encryption algorithms and the configured secret to encrypt the key data signing string and obtain a signature. Adding all headers related to the signature to the original HTTP request to obtain the final HTTP request. As shown below : Process for Extracting Signing String​ To generate a signature, the client needs to extract key data from the HTTP request and combine it into a signing string. The format of the generated signing string is as follows: HTTPMethod Accept Content-MD5 Content-Type Date Headers PathAndParameters  The signing string consists of the above 7 fields separated by \\n. If Headers is empty, no \\n is needed. If other fields are empty, the \\n should still be retained. The signature is case-sensitive. Below are the rules for extracting each field: HTTPMethod: The HTTP method used in the request, in all capital letters, such as POST. Accept: The value of the Accept header in the request, which can be empty. It is recommended to explicitly set the Accept header. When Accept is empty, some HTTP clients will set the default value of */*, which may cause signature verification to fail. Content-MD5: The value of the Content-MD5 header in the request, which can be empty. It is only calculated when there is a non-form body in the request. The following is a reference calculation method for Content-MD5 values in ： String content-MD5 = Base64.encodeBase64(MD5(bodyStream.getbytes(&quot;UTF-8&quot;)));  Content-Type: The value of the Content-Type header in the request, which can be empty. Date: The value of the Date header in the request. When the date_offset configuration is not enabled, it can be empty. Otherwise, it will be used for time offset verification. Headers: Users can select specific headers to participate in the signature. There are the following rules for concatenating the signature string with headers: The keys of the headers participating in the signature calculation are sorted in alphabetical order and concatenated as follows: HeaderKey1 + &quot;:&quot; + HeaderValue1 + &quot;\\n&quot;\\+ HeaderKey2 + &quot;:&quot; + HeaderValue2 + &quot;\\n&quot;\\+ ... HeaderKeyN + &quot;:&quot; + HeaderValueN + &quot;\\n&quot; If the value of a header is empty, it will participate in the signature with the HeaderKey+&quot;:&quot;+&quot;\\n&quot; only, and the key and english colon should be retained.The set of keys for all headers participating in the signature is separated by a comma and placed in the X-Ca-Signature-Headers header.The following headers are not included in the header signature calculation: X-Ca-Signature, X-Ca-Signature-Headers, Accept, Content-MD5, Content-Type, Date. PathAndParameters: This field contains all parameters in the path, query, and form. The specific format is as follows: Path + &quot;?&quot; + Key1 + &quot;=&quot; + Value1 + &quot;&amp;&quot; + Key2 + &quot;=&quot; + Value2 + ... &quot;&amp;&quot; + KeyN + &quot;=&quot; + ValueN  Notes: The keys of the query and form parameter pairs are sorted alphabetically, and the same format as above is used for concatenation.If there are no query and form parameters, use the path directly without adding ? .If the value of a parameter is empty, only the key will be included in the signature. The equal sign should not be included in the signature.If there are array parameters in the query or form (parameters with the same key but different values), only the first value should be included in the signature calculation. Example of Extracting Signing String​ The initial HTTP request : POST /http2test/test?param1=test HTTP/1.1 host:api.aliyun.com accept:application/json; charset=utf-8 ca_version:1 content-type:application/x-www-form-urlencoded; charset=utf-8 x-ca-timestamp:1525872629832 date:Wed, 09 May 2018 13:30:29 GMT+00:00 user-agent:ALIYUN-ANDROID-DEMO x-ca-nonce:c9f15cbf-f4ac-4a6c-b54d-f51abf4b5b44 content-length:33 username=xiaoming&amp;password=123456789  The correct generated signature string is : POST application/json; charset=utf-8 application/x-www-form-urlencoded; charset=utf-8 Wed, 09 May 2018 13:30:29 GMT+00:00 x-ca-key:203753385 x-ca-nonce:c9f15cbf-f4ac-4a6c-b54d-f51abf4b5b44 x-ca-signature-method:HmacSHA256 x-ca-timestamp:1525872629832 /http2test/test?param1=test&amp;password=123456789&amp;username=xiaoming  Signature Calculation Process​ After extracting the key data from the HTTP request and assembling it into a signature string, the client needs to encrypt and encode the signature string to form the final signature. The specific encryption format is as follows, where stringToSign is the extracted signature string, secret is the one filled in the plugin configuration, and sign is the final generated signature: Mac hmacSha256 = Mac.getInstance(&quot;HmacSHA256&quot;); byte[] secretBytes = secret.getBytes(&quot;UTF-8&quot;); hmacSha256.init(new SecretKeySpec(secretBytes, 0, secretBytes.length, &quot;HmacSHA256&quot;)); byte[] result = hmacSha256.doFinal(stringToSign.getBytes(&quot;UTF-8&quot;)); String sign = Base64.encodeBase64String(result);  In summary, the stringToSign is decoded using UTF-8 to obtain a Byte array. Then, an encryption algorithm is used to encrypt the Byte array, and finally, the Base64 algorithm is used to encode the encrypted data, resulting in the final signature. The Process of Adding a Signature​ The client needs to include the following four headers in the HTTP request to be transmitted to the API gateway for signature verification: x-ca-key: The value is the APP Key and is required. x-ca-signature-method: The signature algorithm, the value can be HmacSHA256 or HmacSHA1, optional. The default value is HmacSHA256. x-ca-signature-headers: The collection of keys for all signature headers, separated by commas. Optional. x-ca-signature: The signature and it is required. Here is an example of a complete HTTP request with a signature : POST /http2test/test?param1=test HTTP/1.1 host:api.aliyun.com accept:application/json; charset=utf-8 ca_version:1 content-type:application/x-www-form-urlencoded; charset=utf-8 x-ca-timestamp:1525872629832 date:Wed, 09 May 2018 13:30:29 GMT+00:00 user-agent:ALIYUN-ANDROID-DEMO x-ca-nonce:c9f15cbf-f4ac-4a6c-b54d-f51abf4b5b44 x-ca-key:203753385 x-ca-signature-method:HmacSHA256 x-ca-signature-headers:x-ca-timestamp,x-ca-key,x-ca-nonce,x-ca-signature-method x-ca-signature:xfX+bZxY2yl7EB/qdoDy9v/uscw3Nnj1pgoU+Bm6xdM= content-length:33 username=xiaoming&amp;password=123456789  ","version":"Next","tagName":"h3"},{"title":"Server-side Signature Verification Method​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#server-side-signature-verification-method","content":"Overview of the Process​ The server-side signature verification of the client's request involves four steps : Extract crucial data from the received request to obtain a string for signing. Retrieve the key from the received request and use it to query its corresponding secret. Encrypt the string for signing using the encryption algorithm and secret. Retrieve the client's signature from the received request, and compare the consistency of the server-side signature with the client's signature. As shown below : ","version":"Next","tagName":"h3"},{"title":"Troubleshooting Signature Errors​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#troubleshooting-signature-errors","content":"When the gateway signature verification fails, the server-side signing string (StringToSign) will be returned to the client in the HTTP Response Header. The key is X-Ca-Error-Message. Users only need to compare the locally calculated signing string with the server-side signing string returned to locate the problem; If the StringToSign on the server side is consistent with that on the client side, please check whether the APP Secret used for signature calculation is correct； Because line breaks cannot be represented in HTTP headers, all line breaks in the StringToSign are replaced with #, as shown below: X-Ca-Error-Message: Server StringToSign:`GET#application/json##application/json##X-Ca-Key:200000#X-Ca-Timestamp:1589458000000#/app/v1/config/keys?keys=TEST`  ","version":"Next","tagName":"h3"},{"title":"Related Error Codes​","type":1,"pageTitle":"HMAC authentication","url":"/en-us/docs/plugins/authentication/hmac-auth#related-error-codes","content":"HTTP Status Code\tError Message\tReason401\tInvalid Key\tThe x-ca-key request header is not provided or is invalid. 401\tEmpty Signature\tThe x-ca-signature request header does not contain a signature. 400\tInvalid Signature\tThe x-ca-signature request header contains a signature that does not match the server-calculated signature. 400\tInvalid Content-MD5\tThe content-md5 request header is incorrect. 400\tInvalid Date\tThe time offset calculated based on the date request header exceeds the configured date_offset. 413\tRequest Body Too Large\tThe request body exceeds the size limit of 32 MB. 413\tPayload Too Large\tThe request body exceeds the DownstreamConnectionBufferLimits global configuration. 403\tUnauthorized Consumer\tThe requesting party does not have access permission. ","version":"Next","tagName":"h2"},{"title":"oidc","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/authentication/oidc","content":"oidc Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Key Authentication","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/authentication/key-auth","content":"","keywords":"higress key auth","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Key Authentication","url":"/en-us/docs/plugins/authentication/key-auth#features","content":"The key-auth plug-in implements the authentication function based on the API Key, supports parsing the API Key from the URL parameter or request header of the HTTP request, and verifies whether the API Key has permission to access. ","version":"Next","tagName":"h2"},{"title":"Configuration field​","type":1,"pageTitle":"Key Authentication","url":"/en-us/docs/plugins/authentication/key-auth#configuration-field","content":"Name\tData Type\tParameter requirements\tDefault\tDescriptionconsumers\tarray of object\tRequired\t-\tConfigure the caller of the service to authenticate the request. keys\tarray of string\tRequired\t-\tThe name of the source field of the API Key, which can be a URL parameter or an HTTP request header name. in_query\tbool\tAt least one of in_query and in_header must be true.\ttrue\tWhen configured true, the gateway will try to parse the API Key from the URL parameters. in_header\tbool\tThe same as above.\ttrue\tThe same as above. _rules_\tarray of object\tOptional\t-\tConfigure the access list of a specific route or domain name for authenticating requests. The configuration fields of each item in consumers are described as follows: Name\tData Type\tParameter requirements\tDefault\tDescriptioncredential\tstring\tRequired\t-\tConfigure the consumer's access credentials. name\tstring\tRequired\t-\tConfigure the name of the consumer. The configuration fields of each item in _rules_ are described as follows: Name\tData Type\tParameter requirements\tDefault\tDescription_match_route_\tarray of string\tOptional，Optionally fill in one of _match_route_, _match_domain_.\t-\tConfigure the route name to match. _match_domain_\tarray of string\tOptional，Optionally fill in one of _match_route_, _match_domain_.\t-\tConfigure the domain name to match. allow\tarray of string\tRequired\t-\tFor requests that meet the matching conditions, configure the name of the consumer that is allowed to access. Warning： If the _rules_ field is not configured, authentication will be enabled for all routes of the current gateway instance by default;For a request that passes authentication, an X-Mse-Consumer field will be added to the request header to identify the name of the caller. ","version":"Next","tagName":"h2"},{"title":"Example configuration​","type":1,"pageTitle":"Key Authentication","url":"/en-us/docs/plugins/authentication/key-auth#example-configuration","content":"","version":"Next","tagName":"h2"},{"title":"Enabled for specific routes or domains​","type":1,"pageTitle":"Key Authentication","url":"/en-us/docs/plugins/authentication/key-auth#enabled-for-specific-routes-or-domains","content":"The following configuration will enable Key Auth authentication and authentication for gateway-specific routes or domain names. Note that the credential field can not be repeated. consumers: - credential: 2bda943c-ba2b-11ec-ba07-00163e1250b5 name: consumer1 - credential: c8c8e9ca-558e-4a2d-bb62-e700dcc40e35 name: consumer2 keys: - apikey in_query: true # Use the _rules_ field for fine-grained rule configuration _rules_: # Rule 1: Match by route name to take effect - _match_route_: - route-a - route-b allow: - consumer1 # Rule 2: Take effect by domain name matching - _match_domain_: - &quot;*.example.com&quot; - test.com allow: - consumer2  The route-a and route-b specified in _match_route_ in this example are the route names filled in when creating the gateway route. When these two routes are matched, calls whose name is consumer1 will be allowed Access by callers, other callers are not allowed to access; *.example.com and test.com specified in _match_domain_ in this example are used to match the domain name of the request. When the domain name matches, the caller whose name is consumer2 will be allowed to access, and other calls access is not allowed. Depending on this configuration, the following requests would allow access：​ Assume that the following request will match the route-a route: Set the API Key in the url parameter curl http://xxx.hello.com/test?apikey=2bda943c-ba2b-11ec-ba07-00163e1250b5  Set the API Key in the http request header curl http://xxx.hello.com/test -H 'x-api-key: 2bda943c-ba2b-11ec-ba07-00163e1250b5'  After the authentication is passed, an X-Mse-Consumer field will be added to the header of the request. In this example, its value is consumer1, which is used to identify the name of the caller. The following requests will deny access：​ The request does not provide an API Key, return 401 curl http://xxx.hello.com/test  The API Key provided by the request is not authorized to access, return 401 curl http://xxx.hello.com/test?apikey=926d90ac-ba2e-11ec-ab68-00163e1250b5  The caller matched according to the API Key provided in the request has no access rights, return 403 # consumer2 is not in the allow list of route-a curl http://xxx.hello.com/test?apikey=c8c8e9ca-558e-4a2d-bb62-e700dcc40e35  ","version":"Next","tagName":"h3"},{"title":"Gateway instance level enabled​","type":1,"pageTitle":"Key Authentication","url":"/en-us/docs/plugins/authentication/key-auth#gateway-instance-level-enabled","content":"The following configuration does not specify the _rules_ field, so Key Auth authentication will be enabled at the gateway instance level. consumers: - credential: 2bda943c-ba2b-11ec-ba07-00163e1250b5 name: consumer1 - credential: c8c8e9ca-558e-4a2d-bb62-e700dcc40e35 name: consumer2 keys: - apikey in_query: true  ","version":"Next","tagName":"h3"},{"title":"Error code​","type":1,"pageTitle":"Key Authentication","url":"/en-us/docs/plugins/authentication/key-auth#error-code","content":"HTTP status code\tError information\tReason401\tNo API key found in request.\tAPI not provided by request Key. 401\tRequest denied by Key Auth check. Invalid API key.\tCurrent API Key access is not allowed. 403\tRequest denied by Basic Auth check. Unauthorized consumer.\tThe requested caller does not have access. ","version":"Next","tagName":"h2"},{"title":"Custom Plugin","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/custom","content":"","keywords":"higress custom plugin","version":"Next"},{"title":"Edit the Wasm file​","type":1,"pageTitle":"Custom Plugin","url":"/en-us/docs/plugins/custom#edit-the-wasm-file","content":"SDK for developing Higress' Wasm plugin in Go languageExample of plug-in development ","version":"Next","tagName":"h2"},{"title":"Build the Wasm image​","type":1,"pageTitle":"Custom Plugin","url":"/en-us/docs/plugins/custom#build-the-wasm-image","content":"You can also choose to build the wasm locally first, and then copy it to the Docker image. This requires you to build the build environment locally first. The compilation environment requirements are as follows: Go version: &gt;= 1.18 (need to support generic features) TinyGo version: 0.28.1 (0.28.1 recommended) The following is an example of local steps to build the request-block plugin. ","version":"Next","tagName":"h2"},{"title":"step1. Compile wasm​","type":1,"pageTitle":"Custom Plugin","url":"/en-us/docs/plugins/custom#step1-compile-wasm","content":"tinygo build -o main.wasm -scheduler=none -target=wasi -gc=custom -tags='custommalloc nottinygc_finalizer' ./main.go  ","version":"Next","tagName":"h3"},{"title":"step2. Build and push the docker image of the plugin​","type":1,"pageTitle":"Custom Plugin","url":"/en-us/docs/plugins/custom#step2-build-and-push-the-docker-image-of-the-plugin","content":"Use this simple Dockerfile FROM scratch COPY main.wasm plugin.wasm  docker build -t &lt;your_registry_hub&gt;/request-block:1.0.0 -f &lt;your_dockerfile&gt; . docker push &lt;your_registry_hub&gt;/request-block:1.0.0  ","version":"Next","tagName":"h3"},{"title":"Enable Wasm plugin​","type":1,"pageTitle":"Custom Plugin","url":"/en-us/docs/plugins/custom#enable-wasm-plugin","content":"","version":"Next","tagName":"h2"},{"title":"Using the Higress console​","type":1,"pageTitle":"Custom Plugin","url":"/en-us/docs/plugins/custom#using-the-higress-console","content":"Click the Create button to create a custom plug-in in the plug-in market, and fill in the Wasm mirror address built above in the mirror address column; After the creation is complete, click the configuration button of the plug-in card, fill in the configuration of the plug-in (if any), and turn on the switch to take effect. If the plug-in logic changes, you can build a new image with a different image tag, click the &quot;Edit&quot; button in the upper right menu of the plug-in card, and change the address of the Wasm image to the address of the new version. ","version":"Next","tagName":"h3"},{"title":"Using CRDs​","type":1,"pageTitle":"Custom Plugin","url":"/en-us/docs/plugins/custom#using-crds","content":"Write the WasmPlugin resource as follows: apiVersion: extensions.higress.io/v1alpha1 kind: WasmPlugin metadata: name: request-block namespace: higress-system spec: defaultConfig: block_urls: - &quot;swagger.html&quot; url: oci://&lt;your_registry_hub&gt;/request-block:1.0.0 # The address of the image built and pushed before  Use kubectl apply -f &lt;your-wasm-plugin-yaml&gt; to apply the resources. After the resource takes effect, if the request url carries swagger.html, the request will be rejected, for example: curl &lt;your_gateway_address&gt;/api/user/swagger.html  HTTP/1.1 403 Forbidden date: Wed, 09 Nov 2022 12:12:32 GMT server: istio-envoy content-length: 0  ","version":"Next","tagName":"h3"},{"title":"cors","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/security/cors","content":"cors Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Introduction to the use of Wasm plugins","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/intro","content":"","keywords":"higress wasm","version":"Next"},{"title":"Configure through the Higress console​","type":1,"pageTitle":"Introduction to the use of Wasm plugins","url":"/en-us/docs/plugins/intro#configure-through-the-higress-console","content":"The Higress console provides 3 entries for plug-in configuration: Global configuration: plug-in market -&gt; select plug-in to configureDomain-level configuration: domain name management-&gt;select domain name-&gt;click policy-&gt;select plug-in to configureRouting-level configuration: Routing configuration-&gt;select routing-&gt;click policy-&gt;select plug-in to configure The effective priority of these three configurations is: route level &gt; domain name level &gt; global That is, the global configuration will only take effect for requests that do not match a specific route or domain name For general plugins, including custom plugins, the routing/domain name level configuration fields are exactly the same as the global configuration fields; For authentication plug-ins (Key authentication, HMAC authentication, Basic authentication, JWT authentication, etc.), it is different. The global configuration only configures the Consumer credential and whether to enable global authentication, and configures the allowed access through the allow field at the routing/domain name level. Consumer list, for details, please refer to Configuration Instructions of Key Authentication ","version":"Next","tagName":"h2"},{"title":"Configuration via Higress WasmPlugin CRD​","type":1,"pageTitle":"Introduction to the use of Wasm plugins","url":"/en-us/docs/plugins/intro#configuration-via-higress-wasmplugin-crd","content":"The Higress WasmPlugin CRD extends the Istio WasmPlugin CRD, adding the following configuration fields: Field Name\tData Type\tFilling Requirements\tDescriptiondefaultConfig\tobject\tOptional\tThe default configuration of the plugin, which takes effect globally for requests that do not match specific domain names and routing configurations matchRules\tarray of object\toptional\tconfigurations that match domain names or routes to take effect Description of configuration fields for each item in matchRules: Field Name\tData Type\tFilling Requirements\tConfiguration Example\tDescriptioningress\tarray of string\tone of ingress and domain is required\t[&quot;default/foo&quot;,&quot;default/bar&quot;]\tMatching ingress resource object, the matching format is: namespace/ingress name domain\tarray of string\tone of ingress and domain is required\t[&quot;example.com&quot;,&quot;*.test.com&quot;]\tmatch domain name, support generic domain name config\tobject\toptional\t-\tplug-in configuration that takes effect after matching Take the Request Blocking plugin as an example, if you want the following configuration of the plugin to take effect globally (please refer to the Request Blocking document for configuration field descriptions): block_urls: - swagger.html - foo=bar case_sensitive: false  Then the corresponding WasmPlugin needs to be configured as follows: apiVersion: extensions.higress.io/v1alpha1 kind: WasmPlugin metadata: name: request-block namespace: higress-system spec: defaultConfig: block_urls: - swagger.html - foo=bar case_sensitive: false url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/request-block:1.0.0  The following requests will be blocked immediately after configuration: curl http://example.com?foo=Bar curl http://exmaple.com/foo/Swagger.html  If you want to apply the following configuration to the Ingress named foo under the default namespace (matching requests whose path prefix is /foo): block_headers: - example-key - example-value  Then the corresponding WasmPlugin needs to be configured as follows: apiVersion: extensions.higress.io/v1alpha1 kind: WasmPlugin metadata: name: request-block namespace: higress-system spec: defaultConfig: block_urls: - swagger.html - foo=bar case_sensitive: false matchRules: # Route-level effective configuration - ingress: - default/foo # The ingress named foo under the default namespace will execute the following configuration config: block_headers: - example-key - example-value url: oci://higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/request-block:1.0.0  After configuration, the following request will not match a specific ingress, so it still hits the global default configuration and is denied access: curl http://example.com?foo=Bar  Since the following request matches the Ingress of foo, the routing-level configuration is not affected by the default configuration and will not be denied access: curl http://exmaple.com/foo/Swagger.html  Because the route-level configuration blocks requests with example-key characters in the request header, the following request will be denied access: curl http://exmaple.com/foo -H 'exmaple-key: 123'  When there are multiple rules in matchRules, they will be matched according to the order of the rules. It is recommended to place the ingress matching configuration before the domain matching, which is also the practice of the Higress console ","version":"Next","tagName":"h2"},{"title":"Official plugin mirror address​","type":1,"pageTitle":"Introduction to the use of Wasm plugins","url":"/en-us/docs/plugins/intro#official-plugin-mirror-address","content":"Plugin name\tMirror addressKey authentication\thigress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/key-auth:1.0.0 Basic authentication\thigress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/basic-auth:1.0.0 HMAC authentication\thigress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/hmac-auth:1.0.0 JWT authentication\thigress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/jwt-auth:1.0.0 Bot detection\thigress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/bot-detect:1.0.0 Custom Response\thigress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/custom-response:1.0.0 request block\thigress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/request-block:1.0.0 Key-based rate limit\thigress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/key-rate-limit:1.0.0 WAF Protection\thigress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/waf:1.0.0 ","version":"Next","tagName":"h3"},{"title":"Wasm plugin principle introduction​","type":1,"pageTitle":"Introduction to the use of Wasm plugins","url":"/en-us/docs/plugins/intro#wasm-plugin-principle-introduction","content":"","version":"Next","tagName":"h2"},{"title":"What is Wasm​","type":1,"pageTitle":"Introduction to the use of Wasm plugins","url":"/en-us/docs/plugins/intro#what-is-wasm","content":"// TODO... ","version":"Next","tagName":"h3"},{"title":"Plug-in effective process​","type":1,"pageTitle":"Introduction to the use of Wasm plugins","url":"/en-us/docs/plugins/intro#plug-in-effective-process","content":"// TODO... ","version":"Next","tagName":"h3"},{"title":"Plug-in execution sequence arrangement​","type":1,"pageTitle":"Introduction to the use of Wasm plugins","url":"/en-us/docs/plugins/intro#plug-in-execution-sequence-arrangement","content":"// TODO... ","version":"Next","tagName":"h3"},{"title":"How does the Wasm plugin achieve lossless traffic when changing​","type":1,"pageTitle":"Introduction to the use of Wasm plugins","url":"/en-us/docs/plugins/intro#how-does-the-wasm-plugin-achieve-lossless-traffic-when-changing","content":"// TODO... ","version":"Next","tagName":"h3"},{"title":"waf","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/security/waf","content":"waf Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"JWT authentication","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/authentication/jwt-auth","content":"","keywords":"higress jwt","version":"Next"},{"title":"Description​","type":1,"pageTitle":"JWT authentication","url":"/en-us/docs/plugins/authentication/jwt-auth#description","content":"The jwt-auth plugin implements authentication and authorization based on JWT (JSON Web Token), supports parsing JWTs from URL parameters, request headers, and Cookie fields from HTTP requests, and verifies whether the token has permission to access. The difference between this plugin and the JWT authentication in Security Capabilities-&gt;Authentication and Authorization is that it provides additional capabilities for identifying the caller's identity, supporting the configuration of different JWT credentials for different callers. ","version":"Next","tagName":"h2"},{"title":"Detailed Description​","type":1,"pageTitle":"JWT authentication","url":"/en-us/docs/plugins/authentication/jwt-auth#detailed-description","content":"","version":"Next","tagName":"h2"},{"title":"1. Token-based authentication​","type":1,"pageTitle":"JWT authentication","url":"/en-us/docs/plugins/authentication/jwt-auth#1-token-based-authentication","content":"1.1 Introduction​ Many open APIs need to identify the identity of the caller and determine whether the requested resource can be returned to the caller based on this identity. Token is a mechanism used for identity verification. Based on this mechanism, the application does not need to retain the user's authentication information or session information on the server, which can realize stateless and distributed web application authorization and provide convenience for application extension. 1.2 Process Description​ The above figure is the business process sequence diagram when the gateway uses JWT for authentication, and the following we will describe the steps marked in the figure in detail in words: The client initiates an authentication request to the API gateway, usually carrying the end user's username and password in the request; The gateway forwards the request directly to the backend service; The backend service reads the authentication information (such as the username and password) in the request for verification. After the verification is passed, it uses the private key to generate a standard token and returns it to the gateway; The gateway returns the response with the token to the client, and the client needs to cache this token locally; The client sends a business request to the API gateway, carrying the token in the request; The gateway uses the public key set by the user to verify the token in the request. After the verification is passed, the request is passed through to the backend service; The backend service processes the business and responds; The gateway returns the business response to the client. In this entire process, the gateway uses the token authentication mechanism to realize the ability of users to use their own user system to authorize their API. Next, we will introduce the structured token JSON Web Token (JWT) used by the gateway to implement token authentication. 1.3 JWT​ 1.3.1 Introduction​ JSON Web Token (JWT) is an open standard RFC7519 based on JSON for executing a type of claim to pass between network applications. JWT can generally be used as an independent identity verification token, which can contain user identification, user roles, and permissions information, making it easier to obtain resources from the resource server, and can also add some other necessary declarative information for other business logic, especially suitable for the login scenario of distributed sites. 1.3.2 Composition of JWT​ eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ As shown in the example above, JWT is a string consisting of three parts: HeaderPayloadSignature Header The header of the JWT carries two pieces of information: The type of the token, which is JWTThe algorithm used for encryption The gateway supports the following encryption algorithms: ES256, ES384, ES512, HS256, HS384, HS512, RS256, RS384, RS512, PS256, PS384, PS512, EdDSA  The complete header looks like the following JSON: { 'typ': 'JWT', 'alg': 'HS256' }  The header is then Base64-encoded (this encoding can be symmetrically decoded), forming the first part: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9 Payload The payload is where the actual information is stored. The details are defined below: iss: The issuer of the token. This indicates who created the token and is a string value. sub: The subject identifier. This is the unique identifier for the end user provided by the issuer, and is no longer than 255 ASCII characters, and is case-sensitive within the issuer's scope. aud: The audience(s) of the token, which is an array of case-sensitive strings. exp: The expiration time of the token, after which the token will be invalidated, is an integer declaration representing the Unix timestamp in seconds. iat: The issuance time of the token, is an integer declaration representing the Unix timestamp in seconds. jti: The unique identifier of the token, and the value is unique for every token created by the issuer. It is usually a cryptographically random value to prevent conflicts. This component adds a random entropy that an attacker cannot obtain to the structured token, making it more difficult for the token to be guessed or replayed.  Custom fields for a user feature can also be added, such as the example below adding a &quot;name&quot; field for the user's nickname: { &quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;John Doe&quot; }  The payload is then Base64-encoded, forming the second part of the JWT: JTdCJTBBJTIwJTIwJTIyc3ViJTIyJTNBJTIwJTIyMTIzNDU2Nzg5MCUyMiUyQyUwQSUyMCUyMCUyMm5hbWUlMjIlM0ElMjAlMjJKb2huJTIwRG9lJTIyJTBBJTdE Signature This part is a string that consists of the Base64-encoded header and Base64-encoded payload concatenated with a period, followed by the encryption of the resulting string using the algorithm specified in the header (where $secret represents the user's private key). var encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload); var signature = HMACSHA256(encodedString, '$secret');  These three parts are then concatenated using periods to form the complete JWT string as shown in the example at the beginning of this section. 1.3.3 Time validity​ The gateway will verify the exp field in the token. Once this field has expired, the gateway will consider the token invalid and reject the request directly. The expiration time value must be set. 1.3.4 Several Characteristics of JWT​ By default, JWT is not encrypted and cannot write secret data into JWT.JWT can not only be used for authentication but also for exchanging information. Using JWT effectively can reduce the number of times servers query the database.The biggest drawback of JWT is that the server cannot invalidate a token during use, or change the token's permission, because the server does not keep the session state. That is, once JWT is issued, it will always be valid before it expires, unless the server deploys additional logic.JWT contains authentication information itself. Once leaked, anyone can obtain all permissions of the token. To reduce theft, the expiration time of JWT should be set relatively short. For some more important permissions, users should be authenticated again when using them.To reduce theft, JWT should not be transmitted in plaintext using the HTTP protocol, and the HTTPS protocol should be used for transmission. ","version":"Next","tagName":"h3"},{"title":"2. How to apply the JWT plugin to protect the API of the user system​","type":1,"pageTitle":"JWT authentication","url":"/en-us/docs/plugins/authentication/jwt-auth#2-how-to-apply-the-jwt-plugin-to-protect-the-api-of-the-user-system","content":"2.1 Generate a pair of JWK (JSON Web Key)​ Method 1: Generate online Users can generate the private and public keys used for token generation and verification on this website https://mkjwk.org. The private key is used for the authorization service to issue JWT, and the public key is configured into the JWT plugin for the gateway to verify the signature of the request. Note that the JWKs format configuration used by the gateway requires the public key in the figure below to be placed in the keys structure, such as: {&quot;keys&quot;:[{&quot;kty&quot;:&quot;RSA&quot;,&quot;e&quot;:&quot;AQAB&quot;,...}]}  Method 2: Generate locally This article uses a Java example to illustrate, and users of other languages can also find relevant tools to generate key pairs. Create a new Maven project and add the following dependencies: &lt;dependency&gt; &lt;groupId&gt;org.bitbucket.b_c&lt;/groupId&gt; &lt;artifactId&gt;jose4j&lt;/artifactId&gt; &lt;version&gt;0.7.0&lt;/version&gt; &lt;/dependency&gt;  Use the following code to generate a pair of RSA keys: RsaJsonWebKey rsaJsonWebKey = RsaJwkGenerator.generateJwk(2048); final String publicKeyString = rsaJsonWebKey.toJson(JsonWebKey.OutputControlLevel.PUBLIC_ONLY); final String privateKeyString = rsaJsonWebKey.toJson(JsonWebKey.OutputControlLevel.INCLUDE_PRIVATE);  2.2 Implement the token issuance authentication service using the private key in JWK​ The Keypair JSON string generated online in Section 2.1 (the first of the three boxes) or privateKeyString JSON string generated locally needs to be used as the private key to issue tokens for trusted users to access protected APIs. The specific implementation can refer to the following example. The form of issuing tokens to customers is determined by the user according to the specific business scenario. The function of issuing tokens can be deployed in the production environment and configured as a normal API for visitors to obtain through username and password, or tokens can be generated directly in the local environment and copied to designated users for use. import java.security.PrivateKey; import org.jose4j.json.JsonUtil; import org.jose4j.jwk.RsaJsonWebKey; import org.jose4j.jwk.RsaJwkGenerator; import org.jose4j.jws.AlgorithmIdentifiers; import org.jose4j.jws.JsonWebSignature; import org.jose4j.jwt.JwtClaims; import org.jose4j.jwt.NumericDate; import org.jose4j.lang.JoseException; public class GenerateJwtDemo { public static void main(String[] args) throws JoseException { String keyId = &quot;uniq_key&quot;; //Use the Keypair generated in section 2.1 of this article String privateKeyJson = &quot;{\\n&quot; + &quot; \\&quot;kty\\&quot;: \\&quot;RSA\\&quot;,\\n&quot; + &quot; \\&quot;d\\&quot;: &quot; + &quot;\\&quot;O9MJSOgcjjiVMNJ4jmBAh0mRHF_TlaVva70Imghtlgwxl8BLfcf1S8ueN1PD7xV6Cnq8YenSKsfiNOhC6yZ_fjW1syn5raWfj68eR7cjHWjLOvKjwVY33GBPNOvspNhVAFzeqfWneRTBbga53Agb6jjN0SUcZdJgnelzz5JNdOGaLzhacjH6YPJKpbuzCQYPkWtoZHDqWTzCSb4mJ3n0NRTsWy7Pm8LwG_Fd3pACl7JIY38IanPQDLoighFfo-Lriv5z3IdlhwbPnx0tk9sBwQBTRdZ8JkqqYkxUiB06phwr7mAnKEpQJ6HvhZBQ1cCnYZ_nIlrX9-I7qomrlE1UoQ\\&quot;,\\n&quot; + &quot; \\&quot;e\\&quot;: \\&quot;AQAB\\&quot;,\\n&quot; + &quot; \\&quot;alg\\&quot;: \\&quot;RS256\\&quot;,\\n&quot; + &quot; \\&quot;n\\&quot;: \\&quot;vCuB8MgwPZfziMSytEbBoOEwxsG7XI3MaVMoocziP4SjzU4IuWuE_DodbOHQwb_thUru57_Efe&quot; + &quot;--sfATHEa0Odv5ny3QbByqsvjyeHk6ZE4mSAV9BsHYa6GWAgEZtnDceeeDc0y76utXK2XHhC1Pysi2KG8KAzqDa099Yh7s31AyoueoMnrYTmWfEyDsQL_OAIiwgXakkS5U8QyXmWicCwXntDzkIMh8MjfPskesyli0XQD1AmCXVV3h2Opm1Amx0ggSOOiINUR5YRD6mKo49_cN-nrJWjtwSouqDdxHYP-4c7epuTcdS6kQHiQERBd1ejdpAxV4c0t0FHF7MOy9kw\\&quot;\\n&quot; + &quot;}&quot;; JwtClaims claims = new JwtClaims(); claims.setGeneratedJwtId(); claims.setIssuedAtToNow(); //Expiration time must be set NumericDate date = NumericDate.now(); date.addSeconds(120*60); claims.setExpirationTime(date); claims.setNotBeforeMinutesInThePast(1); claims.setSubject(&quot;YOUR_SUBJECT&quot;); claims.setAudience(&quot;YOUR_AUDIENCE&quot;); //Add custom parameters, use String type for all values claims.setClaim(&quot;userId&quot;, &quot;1213234&quot;); claims.setClaim(&quot;email&quot;, &quot;userEmail@youapp.com&quot;); JsonWebSignature jws = new JsonWebSignature(); jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256); jws.setKeyIdHeaderValue(keyId); jws.setPayload(claims.toJson()); PrivateKey privateKey = new RsaJsonWebKey(JsonUtil.parseJson(privateKeyJson)).getPrivateKey(); jws.setKey(privateKey); String jwtResult = jws.getCompactSerialization(); System.out.println(&quot;Generate Json Web token , result is &quot; + jwtResult); } }  ","version":"Next","tagName":"h3"},{"title":"Plugin Configuration Guide​","type":1,"pageTitle":"JWT authentication","url":"/en-us/docs/plugins/authentication/jwt-auth#plugin-configuration-guide","content":"","version":"Next","tagName":"h2"},{"title":"Configuration Fields​","type":1,"pageTitle":"JWT authentication","url":"/en-us/docs/plugins/authentication/jwt-auth#configuration-fields","content":"Name\tData Type\tRequired\tDefault\tDescriptionconsumers\tarray of object\tYes\t-\tConfigures callers of the service for authenticating requests _rules_\tarray of object\tOptional\t-\tConfigures access control lists for specific routes or domains for authorizing requests The configuration field descriptions for each item in consumers are as follows: Name\tData Type\tRequired\tDefault\tDescriptionname\tstring\tYes\t-\tConfigures the name of this consumer jwks\tstring\tYes\t-\tSpecifies a JSON Web Key Set, as defined in https://www.rfc-editor.org/rfc/rfc7517, consisting of public keys (or symmetric keys) used to verify the signature of JWT issuer\tstring\tYes\t-\tThe issuer of the JWT, which should be consistent with the iss field in the payload claims_to_headers\tarray of object\tOptional\t-\tExtracts the specified fields from the JWT's payload and sets them to the specified request headers for forwarding to the backend from_headers\tarray of object\tOptional\t{&quot;name&quot;:&quot;Authorization&quot;,&quot;value_prefix&quot;:&quot;Bearer &quot;}\tExtracts the JWT from the specified request headers from_params\tarray of string\tOptional\taccess_token\tExtracts the JWT from the specified URL parameters from_cookies\tarray of string\tOptional\t-\tExtracts the JWT from the specified cookie(s) clock_skew_seconds\tnumber\tOptional\t60\tThe amount of clock skew, in seconds, that is allowed when verifying the exp and iat fields of the JWT keep_token\tbool\tOptional\ttrue\tWhether to keep the JWT when forwarding it to the backend Note: The default value is used only if neither from_headers, from_params, nor from_cookies are configured. The configuration field descriptions for each item in from_headers are as follows: Name\tData Type\tRequired\tDefault\tDescriptionname\tstring\tYes\t-\tSpecifies the request header to extract the JWT from value_prefix\tstring\tYes\t-\tRemoves the specified prefix from the request header's value, leaving the rest as the JWT The configuration field descriptions for each item in claims_to_headers are as follows: Name\tData Type\tRequired\tDefault\tDescriptionclaim\tstring\tYes\t-\tThe name of the field in the JWT payload, which must be a string or unsigned integer header\tstring\tYes\t-\tSets the value of the specified request header to the value of the specified field in the payload, for forwarding to the backend override\tbool\tOptional\ttrue\tIf true, overrides an existing header with the same name; if false, appends the header to the existing headers The configuration field descriptions for each item in _rules_ are as follows: Name\tData Type\tRequired\tDefault\tDescription_match_route_\tarray of string\tOptional, select either _match_route_ or _match_domain_\t-\tConfigures the route names to match _match_domain_\tarray of string\tOptional, select either _match_route_ or _match_domain_\t-\tConfigures the domains to match allow\tarray of string\tRequired\t-\tConfigures the consumer names allowed to access the matched requests Note: If the _rules_ field is not configured, authentication and authorization are enabled for all routes of the current gateway instance by default;For authenticated and authorized requests, a X-Mse-Consumer field is added to the request header to identify the caller's name. ","version":"Next","tagName":"h3"},{"title":"Configuration Example​","type":1,"pageTitle":"JWT authentication","url":"/en-us/docs/plugins/authentication/jwt-auth#configuration-example","content":"Enable for Specific Routes or Domains​ The following configuration enables Jwt Auth authentication and authorization for specific routes or domains of the gateway. If a JWT can match multiple jwks, the first matching consumer is hit according to the configuration order. consumers: - name: consumer1 issuer: abcd jwks: | { &quot;keys&quot;: [ { &quot;kty&quot;: &quot;oct&quot;, &quot;kid&quot;: &quot;123&quot;, &quot;k&quot;: &quot;hM0k3AbXBPpKOGg__Ql2Obcq7s60myWDpbHXzgKUQdYo7YCRp0gUqkCnbGSvZ2rGEl4YFkKqIqW7mTHdj-bcqXpNr-NOznEyMpVPOIlqG_NWVC3dydBgcsIZIdD-MR2AQceEaxriPA_VmiUCwfwL2Bhs6_i7eolXoY11EapLQtutz0BV6ZxQQ4dYUmct--7PLNb4BWJyQeWu0QfbIthnvhYllyl2dgeLTEJT58wzFz5HeNMNz8ohY5K0XaKAe5cepryqoXLhA-V-O1OjSG8lCNdKS09OY6O0fkyweKEtuDfien5tHHSsHXoAxYEHPFcSRL4bFPLZ0orTt1_4zpyfew&quot;, &quot;alg&quot;: &quot;HS256&quot; } ] } - name: consumer2 issuer: abc jwks: | { &quot;keys&quot;: [ { &quot;kty&quot;: &quot;RSA&quot;, &quot;e&quot;: &quot;AQAB&quot;, &quot;use&quot;: &quot;sig&quot;, &quot;kid&quot;: &quot;123&quot;, &quot;alg&quot;: &quot;RS256&quot;, &quot;n&quot;: &quot;i0B67f1jggT9QJlZ_8QL9QQ56LfurrqDhpuu8BxtVcfxrYmaXaCtqTn7OfCuca7cGHdrJIjq99rz890NmYFZuvhaZ-LMt2iyiSb9LZJAeJmHf7ecguXS_-4x3hvbsrgUDi9tlg7xxbqGYcrco3anmalAFxsbswtu2PAXLtTnUo6aYwZsWA6ksq4FL3-anPNL5oZUgIp3HGyhhLTLdlQcC83jzxbguOim-0OEz-N4fniTYRivK7MlibHKrJfO3xa_6whBS07HW4Ydc37ZN3Rx9Ov3ZyV0idFblU519nUdqp_inXj1eEpynlxH60Ys_aTU2POGZh_25KXGdF_ZC_MSRw&quot; } ] } # Use the _rules_ field for fine-grained rule configuration _rules_: # Rule 1: Effective when matched by route name - _match_route_: - route-a - route-b allow: - consumer1 # Rule 2: Effective when matched by domain name - _match_domain_: - &quot;*.example.com&quot; - test.com allow: - consumer2  In this example, the route-a and route-b specified in _match_route_ are the names of the routes filled in when creating the gateway route. When these two routes are matched, access will be allowed for the caller with the name of consumer1, and other callers will not be allowed to access. The *.example.com and test.com specified in _match_domain_ are used to match the domain names of the requests. When a domain name match is found, access will be allowed for the caller with the name of consumer2, and other callers will not be allowed to access. According to this configuration, the following requests are allowed:​ Assuming the following requests will match the route-a route: JWT is set in URL parameter curl 'http://xxx.hello.com/test?access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjEyMyJ9.eyJpc3MiOiJhYmNkIiwic3ViIjoidGVzdCIsImlhdCI6MTY2NTY2MDUyNywiZXhwIjoxODY1NjczODE5fQ.-vBSV0bKeDwQcuS6eeSZN9dLTUnSnZVk8eVCXdooCQ4'  JWT is set in HTTP request header curl http://xxx.hello.com/test -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjEyMyJ9.eyJpc3MiOiJhYmNkIiwic3ViIjoidGVzdCIsImlhdCI6MTY2NTY2MDUyNywiZXhwIjoxODY1NjczODE5fQ.-vBSV0bKeDwQcuS6eeSZN9dLTUnSnZVk8eVCXdooCQ4'  After authentication and authorization, a X-Mse-Consumer field will be added in the request header with a value of consumer1 in this example, to identify the name of the caller. The following requests will be denied:​ Request without JWT provided, returns 401 curl http://xxx.hello.com/test  The consumer matched by the provided JWT in the request does not have access, returns 403 # consumer1 is not in the allow list of *.example.com curl 'http://xxx.example.com/test' -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjEyMyJ9.eyJpc3MiOiJhYmNkIiwic3ViIjoidGVzdCIsImlhdCI6MTY2NTY2MDUyNywiZXhwIjoxODY1NjczODE5fQ.-vBSV0bKeDwQcuS6eeSZN9dLTUnSnZVk8eVCXdooCQ4'  Enabling at Gateway Instance Level​ The following configuration does not specify the _rules_ field, so JWT authentication will be enabled at the gateway instance level: consumers: - name: consumer1 issuer: abcd jwks: | { &quot;keys&quot;: [ { &quot;kty&quot;: &quot;oct&quot;, &quot;kid&quot;: &quot;123&quot;, &quot;k&quot;: &quot;hM0k3AbXBPpKOGg__Ql2Obcq7s60myWDpbHXzgKUQdYo7YCRp0gUqkCnbGSvZ2rGEl4YFkKqIqW7mTHdj-bcqXpNr-NOznEyMpVPOIlqG_NWVC3dydBgcsIZIdD-MR2AQceEaxriPA_VmiUCwfwL2Bhs6_i7eolXoY11EapLQtutz0BV6ZxQQ4dYUmct--7PLNb4BWJyQeWu0QfbIthnvhYllyl2dgeLTEJT58wzFz5HeNMNz8ohY5K0XaKAe5cepryqoXLhA-V-O1OjSG8lCNdKS09OY6O0fkyweKEtuDfien5tHHSsHXoAxYEHPFcSRL4bFPLZ0orTt1_4zpyfew&quot;, &quot;alg&quot;: &quot;HS256&quot; } ] } - name: consumer2 issuer: abc jwks: | { &quot;keys&quot;: [ { &quot;kty&quot;: &quot;RSA&quot;, &quot;e&quot;: &quot;AQAB&quot;, &quot;use&quot;: &quot;sig&quot;, &quot;kid&quot;: &quot;123&quot;, &quot;alg&quot;: &quot;RS256&quot;, &quot;n&quot;: &quot;i0B67f1jggT9QJlZ_8QL9QQ56LfurrqDhpuu8BxtVcfxrYmaXaCtqTn7OfCuca7cGHdrJIjq99rz890NmYFZuvhaZ-LMt2iyiSb9LZJAeJmHf7ecguXS_-4x3hvbsrgUDi9tlg7xxbqGYcrco3anmalAFxsbswtu2PAXLtTnUo6aYwZsWA6ksq4FL3-anPNL5oZUgIp3HGyhhLTLdlQcC83jzxbguOim-0OEz-N4fniTYRivK7MlibHKrJfO3xa_6whBS07HW4Ydc37ZN3Rx9Ov3ZyV0idFblU519nUdqp_inXj1eEpynlxH60Ys_aTU2POGZh_25KXGdF_ZC_MSRw&quot; } ] }  ","version":"Next","tagName":"h3"},{"title":"Common Error Codes​","type":1,"pageTitle":"JWT authentication","url":"/en-us/docs/plugins/authentication/jwt-auth#common-error-codes","content":"HTTP Status Code\tError Message\tReason Description401\tJWT missing\tThe JWT is not provided in the request header. 401\tJWT expired\tThe JWT has expired. 401\tJWT verification fails\tThe JWT payload verification failed, such as the iss mismatch. 403\tAccess denied\tAccess to the current route is denied. ","version":"Next","tagName":"h2"},{"title":"cluster-key-rate-limit","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/traffic/cluster-key-rate-limit","content":"cluster-key-rate-limit Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"ip-restriction","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/traffic/ip-restriction","content":"ip-restriction Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Robot Detect","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/security/bot-detect","content":"","keywords":"higress bot detect","version":"Next"},{"title":"Description​","type":1,"pageTitle":"Robot Detect","url":"/en-us/docs/plugins/security/bot-detect#description","content":"bot-detect plugin can be used to identify and prevent web crawlers from crawling websites. ","version":"Next","tagName":"h2"},{"title":"Configuration Fields​","type":1,"pageTitle":"Robot Detect","url":"/en-us/docs/plugins/security/bot-detect#configuration-fields","content":"Name\tType\tRequirement\tDefault Value\tDescriptionallow\tarray of string\tOptional\t-\tA regular expression to match the User-Agent request header and will allow access if the match hits deny\tarray of string\tOptional\t-\tA regular expression to match the User-Agent request header and will block the request if the match hits blocked_code\tnumber\tOptional\t403\tThe HTTP status code returned when a request is blocked blocked_message\tstring\tOptional\t-\tThe HTTP response Body returned when a request is blocked If field allow and field deny are not configured at the same time, the default logic to identify crawlers will be executed. By configuring the allow field, requests that would otherwise hit the default logic can be allowed. The judgement can be extended by configuring the deny field The default set of crawler judgment regular expressions is as follows： # Bots General matcher 'name/0.0' (?:\\/[A-Za-z0-9\\.]+|) {0,5}([A-Za-z0-9 \\-_\\!\\[\\]:]{0,50}(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]{0,50}))[/ ](\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|) # Bots General matcher 'name 0.0' (?:\\/[A-Za-z0-9\\.]+|) {0,5}([A-Za-z0-9 \\-_\\!\\[\\]:]{0,50}(?:[Aa]rchiver|[Ii]ndexer|[Ss]craper|[Bb]ot|[Ss]pider|[Cc]rawl[a-z]{0,50})) (\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|) # Bots containing spider|scrape|bot(but not CUBOT)|Crawl ((?:[A-z0-9]{1,50}|[A-z\\-]{1,50} ?|)(?: the |)(?:[Ss][Pp][Ii][Dd][Ee][Rr]|[Ss]crape|[Cc][Rr][Aa][Ww][Ll])[A-z0-9]{0,50})(?:(?:[ /]| v)(\\d+)(?:\\.(\\d+)|)(?:\\.(\\d+)|)|) # Bots Pattern '/name-0.0' /((?:Ant-)?Nutch|[A-z]+[Bb]ot|[A-z]+[Ss]pider|Axtaris|fetchurl|Isara|ShopSalad|Tailsweep)[ \\-](\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)? # Bots Pattern 'name/0.0' \\b(008|Altresium|Argus|BaiduMobaider|BoardReader|DNSGroup|DataparkSearch|EDI|Goodzer|Grub|INGRID|Infohelfer|LinkedInBot|LOOQ|Nutch|OgScrper|PathDefender|Peew|PostPost|Steeler|Twitterbot|VSE|WebCrunch|WebZIP|Y!J-BR[A-Z]|YahooSeeker|envolk|sproose|wminer)/(\\d+)(?:\\.(\\d+)|)(?:\\.(\\d+)|) # More bots (CSimpleSpider|Cityreview Robot|CrawlDaddy|CrawlFire|Finderbots|Index crawler|Job Roboter|KiwiStatus Spider|Lijit Crawler|QuerySeekerSpider|ScollSpider|Trends Crawler|USyd-NLP-Spider|SiteCat Webbot|BotName\\/\\$BotVersion|123metaspider-Bot|1470\\.net crawler|50\\.nu|8bo Crawler Bot|Aboundex|Accoona-[A-z]{1,30}-Agent|AdsBot-Google(?:-[a-z]{1,30}|)|altavista|AppEngine-Google|archive.{0,30}\\.org_bot|archiver|Ask Jeeves|[Bb]ai[Dd]u[Ss]pider(?:-[A-Za-z]{1,30})(?:-[A-Za-z]{1,30}|)|bingbot|BingPreview|blitzbot|BlogBridge|Bloglovin|BoardReader Blog Indexer|BoardReader Favicon Fetcher|boitho.com-dc|BotSeer|BUbiNG|\\b\\w{0,30}favicon\\w{0,30}\\b|\\bYeti(?:-[a-z]{1,30}|)|Catchpoint(?: bot|)|[Cc]harlotte|Checklinks|clumboot|Comodo HTTP\\(S\\) Crawler|Comodo-Webinspector-Crawler|ConveraCrawler|CRAWL-E|CrawlConvera|Daumoa(?:-feedfetcher|)|Feed Seeker Bot|Feedbin|findlinks|Flamingo_SearchEngine|FollowSite Bot|furlbot|Genieo|gigabot|GomezAgent|gonzo1|(?:[a-zA-Z]{1,30}-|)Googlebot(?:-[a-zA-Z]{1,30}|)|Google SketchUp|grub-client|gsa-crawler|heritrix|HiddenMarket|holmes|HooWWWer|htdig|ia_archiver|ICC-Crawler|Icarus6j|ichiro(?:/mobile|)|IconSurf|IlTrovatore(?:-Setaccio|)|InfuzApp|Innovazion Crawler|InternetArchive|IP2[a-z]{1,30}Bot|jbot\\b|KaloogaBot|Kraken|Kurzor|larbin|LEIA|LesnikBot|Linguee Bot|LinkAider|LinkedInBot|Lite Bot|Llaut|lycos|Mail\\.RU_Bot|masscan|masidani_bot|Mediapartners-Google|Microsoft .{0,30} Bot|mogimogi|mozDex|MJ12bot|msnbot(?:-media {0,2}|)|msrbot|Mtps Feed Aggregation System|netresearch|Netvibes|NewsGator[^/]{0,30}|^NING|Nutch[^/]{0,30}|Nymesis|ObjectsSearch|OgScrper|Orbiter|OOZBOT|PagePeeker|PagesInventory|PaxleFramework|Peeplo Screenshot Bot|PlantyNet_WebRobot|Pompos|Qwantify|Read%20Later|Reaper|RedCarpet|Retreiver|Riddler|Rival IQ|scooter|Scrapy|Scrubby|searchsight|seekbot|semanticdiscovery|SemrushBot|Simpy|SimplePie|SEOstats|SimpleRSS|SiteCon|Slackbot-LinkExpanding|Slack-ImgProxy|Slurp|snappy|Speedy Spider|Squrl Java|Stringer|TheUsefulbot|ThumbShotsBot|Thumbshots\\.ru|Tiny Tiny RSS|Twitterbot|WhatsApp|URL2PNG|Vagabondo|VoilaBot|^vortex|Votay bot|^voyager|WASALive.Bot|Web-sniffer|WebThumb|WeSEE:[A-z]{1,30}|WhatWeb|WIRE|WordPress|Wotbox|www\\.almaden\\.ibm\\.com|Xenu(?:.s|) Link Sleuth|Xerka [A-z]{1,30}Bot|yacy(?:bot|)|YahooSeeker|Yahoo! Slurp|Yandex\\w{1,30}|YodaoBot(?:-[A-z]{1,30}|)|YottaaMonitor|Yowedo|^Zao|^Zao-Crawler|ZeBot_www\\.ze\\.bz|ZooShot|ZyBorg)(?:[ /]v?(\\d+)(?:\\.(\\d+)(?:\\.(\\d+)|)|)|)  ","version":"Next","tagName":"h2"},{"title":"Configuration Samples​","type":1,"pageTitle":"Robot Detect","url":"/en-us/docs/plugins/security/bot-detect#configuration-samples","content":"","version":"Next","tagName":"h2"},{"title":"Release Requests that would otherwise Hit the Crawler Rules​","type":1,"pageTitle":"Robot Detect","url":"/en-us/docs/plugins/security/bot-detect#release-requests-that-would-otherwise-hit-the-crawler-rules","content":"allow: - &quot;.*Go-http-client.*&quot;  Without this configuration, the default Golang web library request will be treated as a crawler and access will be denied. ","version":"Next","tagName":"h3"},{"title":"Add Crawler Judgement​","type":1,"pageTitle":"Robot Detect","url":"/en-us/docs/plugins/security/bot-detect#add-crawler-judgement","content":"deny: - &quot;spd-tools.*&quot;  According to this configuration, the following requests will be denied: curl http://example.com -H 'User-Agent: spd-tools/1.1' curl http://exmaple.com -H 'User-Agent: spd-tools'  ","version":"Next","tagName":"h3"},{"title":"Only Enabled for Specific Routes or Domains​","type":1,"pageTitle":"Robot Detect","url":"/en-us/docs/plugins/security/bot-detect#only-enabled-for-specific-routes-or-domains","content":"# Use _rules_ field for fine-grained rule configurations _rules_: # Rule 1: Match by route name - _match_route_: - route-a - route-b # Rule 2: Match by domain - _match_domain_: - &quot;*.example.com&quot; - test.com allow: - &quot;.*Go-http-client.*&quot;  In the rule sample of _match_route_, route-a and route-b are the route names provided when creating a new gateway route. When the current route names matches the configuration, the rule following shall be applied. In the rule sample of _match_domain_, *.example.com and test.com are the domain names used for request matching. When the current domain name matches the configuration, the rule following shall be applied. All rules shall be checked following the order of items in the _rules_ field, The first matched rule will be applied. All remained will be ignored. ","version":"Next","tagName":"h3"},{"title":"Rate limiting based on Key","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/traffic/key-rate-limit","content":"","keywords":"higress rate limit","version":"Next"},{"title":"Description​","type":1,"pageTitle":"Rate limiting based on Key","url":"/en-us/docs/plugins/traffic/key-rate-limit#description","content":"key-rate-limit plugin implements a rate-limiting function based on specific key-values. The key-values may come from URL parameters or HTTP headers. ","version":"Next","tagName":"h2"},{"title":"Configuration Fields​","type":1,"pageTitle":"Rate limiting based on Key","url":"/en-us/docs/plugins/traffic/key-rate-limit#configuration-fields","content":"Name\tType\tRequirement\tDefault Value\tDescriptionlimit_by_header\tstring\tOptional. Choose one from following: limit_by_header, limit_by_param.\t-\tThe name of HTTP header used to obtain key-value used in rate-limiting. limit_by_param\tstring\tOptional. Choose one from following: limit_by_header, limit_by_param.\t-\tThe name of URL parameter used to obtain key-value used in rate-limiting. limit_keys\tarray of object\tRequired\t-\tRate-limiting thresholds when matching specific key-values Field descriptions of limit_keys items: Name\tType\tRequirement\tDefault Value\tDescriptionkey\tstring\tRequired\t-\tValue to match of the specific key query_per_second\tnumber\tOptional. Choose one from following: query_per_second, query_per_minute, query_per_hour, query_per_day.\t-\tNumber of requests allowed per second query_per_minute\tnumber\tOptional. Choose one from following: query_per_second, query_per_minute, query_per_hour, query_per_day.\t-\tNumber of requests allowed per minute query_per_hour\tnumber\tOptional. Choose one from following: query_per_second, query_per_minute, query_per_hour, query_per_day.\t-\tNumber of requests allowed per hour query_per_day\tnumber\tOptional. Choose one from following: query_per_second, query_per_minute, query_per_hour, query_per_day.\t-\tNumber of requests allowed per day ","version":"Next","tagName":"h2"},{"title":"Configuration Samples​","type":1,"pageTitle":"Rate limiting based on Key","url":"/en-us/docs/plugins/traffic/key-rate-limit#configuration-samples","content":"","version":"Next","tagName":"h2"},{"title":"Use query parameter apikey for rate-limiting​","type":1,"pageTitle":"Rate limiting based on Key","url":"/en-us/docs/plugins/traffic/key-rate-limit#use-query-parameter-apikey-for-rate-limiting","content":"limit_by_param: apikey limit_keys: - key: 9a342114-ba8a-11ec-b1bf-00163e1250b5 query_per_second: 10 - key: a6a6d7f2-ba8a-11ec-bec2-00163e1250b5 query_per_minute: 100  ","version":"Next","tagName":"h3"},{"title":"Use HTTP header parameter x-ca-key for rate-limiting​","type":1,"pageTitle":"Rate limiting based on Key","url":"/en-us/docs/plugins/traffic/key-rate-limit#use-http-header-parameter-x-ca-key-for-rate-limiting","content":"limit_by_header: x-ca-key limit_keys: - key: 102234 query_per_second: 10 - key: 308239 query_per_hour: 10  ","version":"Next","tagName":"h3"},{"title":"Enable rate-limiting for specific routes or domains​","type":1,"pageTitle":"Rate limiting based on Key","url":"/en-us/docs/plugins/traffic/key-rate-limit#enable-rate-limiting-for-specific-routes-or-domains","content":"# Use _rules_ field for fine-grained rule configurations _rules_: # Rule 1: Match by route name - _match_route_: - route-a - route-b limit_by_header: x-ca-key limit_keys: - key: 102234 query_per_second: 10 # Rule 2: Match by domain - _match_domain_: - &quot;*.example.com&quot; - test.com limit_by_header: x-ca-key limit_keys: - key: 102234 query_per_second: 100  In the rule sample of _match_route_, route-a and route-b are the route names provided when creating a new gateway route. When the current route names matches the configuration, the rule following shall be applied. In the rule sample of _match_domain_, *.example.com and test.com are the domain names used for request matching. When the current domain name matches the configuration, the rule following shall be applied. All rules shall be checked following the order of items in the _rules_ field, The first matched rule will be applied. All remained will be ignored. ","version":"Next","tagName":"h3"},{"title":"request blocking","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/traffic/request-block","content":"","keywords":"higress request block","version":"Next"},{"title":"Description​","type":1,"pageTitle":"request blocking","url":"/en-us/docs/plugins/traffic/request-block#description","content":"request-block plugin implements a request blocking function based on request characteristics such as URL and request header. It can be used to protect internal resources from unauthorized access. ","version":"Next","tagName":"h2"},{"title":"Configuration Fields​","type":1,"pageTitle":"request blocking","url":"/en-us/docs/plugins/traffic/request-block#configuration-fields","content":"Name\tType\tRequirement\tDefault Value\tDescriptionblock_urls\tarray of string\tOptional. Choose one from following: block_urls, block_headers, block_bodies\t-\tHTTP URLs to be blocked. block_headers\tarray of string\tOptional. Choose one from following: block_urls, block_headers, block_bodies\t-\tHTTP request headers to be blocked. block_bodies\tarray of string\tOptional. Choose one from following: block_urls ,block_headers, block_bodies\t-\tHTTP request bodies to be blocked. blocked_code\tnumber\tOptional\t403\tHTTP response status code to be sent when corresponding request is blocked. blocked_message\tstring\tOptional\t-\tHTTP response body to be sent when corresponding request is blocked. case_sensitive\tbool\tOptional\ttrue\tWhether to use case-senstive comparison when matching. Enabled by default. ","version":"Next","tagName":"h2"},{"title":"Configuration Samples​","type":1,"pageTitle":"request blocking","url":"/en-us/docs/plugins/traffic/request-block#configuration-samples","content":"","version":"Next","tagName":"h2"},{"title":"Block Specific Request URLs​","type":1,"pageTitle":"request blocking","url":"/en-us/docs/plugins/traffic/request-block#block-specific-request-urls","content":"block_urls: - swagger.html - foo=bar case_sensitive: false  According to the configuration above, following requests will be blocked: curl http://example.com?foo=Bar curl http://exmaple.com/Swagger.html  ","version":"Next","tagName":"h3"},{"title":"Block Specific Request Headers​","type":1,"pageTitle":"request blocking","url":"/en-us/docs/plugins/traffic/request-block#block-specific-request-headers","content":"block_headers: - example-key - example-value  According to the configuration above, following requests will be blocked: curl http://example.com -H 'example-key: 123' curl http://exmaple.com -H 'my-header: example-value'  ","version":"Next","tagName":"h3"},{"title":"Block Specific Request Bodies​","type":1,"pageTitle":"request blocking","url":"/en-us/docs/plugins/traffic/request-block#block-specific-request-bodies","content":"block_bodies: - &quot;hello world&quot; case_sensitive: false  According to the configuration above, following requests will be blocked: curl http://example.com -d 'Hello World' curl http://exmaple.com -d 'hello world'  ","version":"Next","tagName":"h3"},{"title":"Only Enable for Specific Routes or Domains​","type":1,"pageTitle":"request blocking","url":"/en-us/docs/plugins/traffic/request-block#only-enable-for-specific-routes-or-domains","content":"# Use _rules_ field for fine-grained rule configurations _rules_: # Rule 1: Match by route name - _match_route_: - route-a - route-b block_bodies: - &quot;hello world&quot; # Rule 2: Match by domain - _match_domain_: - &quot;*.example.com&quot; - test.com block_urls: - &quot;swagger.html&quot; block_bodies: - &quot;hello world&quot;  In the rule sample of _match_route_, route-a and route-b are the route names provided when creating a new gateway route. When the current route names matches the configuration, the rule following shall be applied. In the rule sample of _match_domain_, *.example.com and test.com are the domain names used for request matching. When the current domain name matches the configuration, the rule following shall be applied. All rules shall be checked following the order of items in the _rules_ field, The first matched rule will be applied. All remained will be ignored. ","version":"Next","tagName":"h3"},{"title":"Maximum Request Body Size Limitation​","type":1,"pageTitle":"request blocking","url":"/en-us/docs/plugins/traffic/request-block#maximum-request-body-size-limitation","content":"When block_bodies is configured, body matching shall only be performed when its size is smaller than 32MB. If not, and no block_urls or block_headers configuration is matched, the request won't be blocked. When block_bodies is configured, if the size of request body exceeds the global configuration of DownstreamConnectionBufferLimits, a 413 Payload Too Large response will be returned. ","version":"Next","tagName":"h2"},{"title":"request-validation","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/traffic/request-validation","content":"request-validation Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"cache-control","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/transformation/cache-control","content":"cache-control Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"de-graphql","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/transformation/de-graphql","content":"de-graphql Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Higress Parameters Guide","type":0,"sectionRef":"#","url":"/en-us/docs/user/annotation","content":"Higress Parameters Guide TBD","keywords":"Higress","version":"Next"},{"title":"transformer","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/transformation/transformer","content":"transformer Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"configmap","type":0,"sectionRef":"#","url":"/en-us/docs/user/configmap","content":"configmap Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"annotation-use-case","type":0,"sectionRef":"#","url":"/en-us/docs/user/annotation-use-case","content":"annotation-use-case Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Higress Parameters Guide","type":0,"sectionRef":"#","url":"/en-us/docs/user/configurations","content":"Higress Parameters Guide TBD","keywords":"Higress","version":"Next"},{"title":"Custom response","type":0,"sectionRef":"#","url":"/en-us/docs/plugins/transformation/custom-response","content":"","keywords":"higress custom response","version":"Next"},{"title":"Description​","type":1,"pageTitle":"Custom response","url":"/en-us/docs/plugins/transformation/custom-response#description","content":"custom-response plugin implements a function of sending custom responses, including custom HTTP response status codes, HTTP response headers and HTTP response body, which can be used in the scenarios of response mocking and sending a custom response for specific status codes, such as customizing the response for rate-limited requests. ","version":"Next","tagName":"h2"},{"title":"Configuration Fields​","type":1,"pageTitle":"Custom response","url":"/en-us/docs/plugins/transformation/custom-response#configuration-fields","content":"Name\tType\tRequirement\tDefault Value\tDescriptionstatus_code\tnumber\tOptional\t200\tCustom HTTP response status code headers\tarray of string\tOptional\t-\tCustom HTTP response header. Key and value shall be separated using =. body\tstring\tOptional\t-\tCustom HTTP response body enable_on_status\tarray of number\tOptional\t-\tThe original response status code to match. Generate the custom response only the actual status code matches the configuration. Ignore the status code match if left unconfigured. ","version":"Next","tagName":"h2"},{"title":"Configuration Samples​","type":1,"pageTitle":"Custom response","url":"/en-us/docs/plugins/transformation/custom-response#configuration-samples","content":"","version":"Next","tagName":"h2"},{"title":"Mock Responses​","type":1,"pageTitle":"Custom response","url":"/en-us/docs/plugins/transformation/custom-response#mock-responses","content":"status_code: 200 headers: - Content-Type=application/json - Hello=World body: &quot;{\\&quot;hello\\&quot;:\\&quot;world\\&quot;}&quot;  According to the configuration above, all the requests will get the following custom response: HTTP/1.1 200 OK Content-Type: application/json Hello: World Content-Length: 17 {&quot;hello&quot;:&quot;world&quot;}  ","version":"Next","tagName":"h3"},{"title":"Send a Custom Response when Rate-Limited​","type":1,"pageTitle":"Custom response","url":"/en-us/docs/plugins/transformation/custom-response#send-a-custom-response-when-rate-limited","content":"enable_on_status: - 429 status_code: 302 headers: - Location=https://example.com  When rate-limited, normally gateway will return a status code of 429 . Now, rate-limited requests will get the following custom response: HTTP/1.1 302 Found Location: https://example.com  So based on the 302 redirecting mechanism provided by browsers, this can redirect rate-limited users to other pages, for example, a static page hosted on CDN. If you'd like to send other responses when rate-limited, please add other fields into the configuration, referring to the Mock Responses scenario. ","version":"Next","tagName":"h3"},{"title":"Only Enabled for Specific Routes or Domains​","type":1,"pageTitle":"Custom response","url":"/en-us/docs/plugins/transformation/custom-response#only-enabled-for-specific-routes-or-domains","content":"# Use _rules_ field for fine-grained rule configurations _rules_: # Rule 1: Match by route name - _match_route_: - route-a - route-b body: &quot;{\\&quot;hello\\&quot;:\\&quot;world\\&quot;}&quot; # Rule 2: Match by domain - _match_domain_: - &quot;*.example.com&quot; - test.com enable_on_status: - 429 status_code: 200 headers: - Content-Type=application/json body: &quot;{\\&quot;errmsg\\&quot;: \\&quot;rate limited\\&quot;}&quot;  In the rule sample of _match_route_, route-a and route-b are the route names provided when creating a new gateway route. When the current route names matches the configuration, the rule following shall be applied. In the rule sample of _match_domain_, *.example.com and test.com are the domain names used for request matching. When the current domain name matches the configuration, the rule following shall be applied. All rules shall be checked following the order of items in the _rules_ field, The first matched rule will be applied. All remained will be ignored. ","version":"Next","tagName":"h3"},{"title":"HTTP to Dubbo","type":0,"sectionRef":"#","url":"/en-us/docs/user/dubbo-http2rpc","content":"HTTP to Dubbo","keywords":"Dubbo discovery","version":"Next"},{"title":"Higress Dubbo","type":0,"sectionRef":"#","url":"/en-us/docs/user/dubbo","content":"Higress Dubbo TBD","keywords":"Dubbo discovery","version":"Next"},{"title":"OpenKruise Rollout","type":0,"sectionRef":"#","url":"/en-us/docs/user/kruise-rollout","content":"OpenKruise Rollout TBD","keywords":"rollout gray","version":"Next"},{"title":"Nginx Ingress compatibility description","type":0,"sectionRef":"#","url":"/en-us/docs/user/nginx-ingress","content":"Nginx Ingress compatibility description TBD","keywords":"ingress nginx","version":"Next"},{"title":"Nginx Ingress Controller","type":0,"sectionRef":"#","url":"/en-us/docs/user/nginx-ingress-migrate","content":"Nginx Ingress Controller TBD","keywords":"Ingress","version":"Next"},{"title":"Nacos Route","type":0,"sectionRef":"#","url":"/en-us/docs/user/nacos-route","content":"Nacos Route TBD","keywords":"ingress higress nacos","version":"Next"},{"title":"Mcp Bridge Configuration","type":0,"sectionRef":"#","url":"/en-us/docs/user/mcp-bridge","content":"Mcp Bridge Configuration TBD","keywords":"discovery","version":"Next"},{"title":"OpenSergo","type":0,"sectionRef":"#","url":"/en-us/docs/user/opensergo-gray","content":"OpenSergo TBD","keywords":"opensergo gray","version":"Next"},{"title":"Sentinel","type":0,"sectionRef":"#","url":"/en-us/docs/user/sentinel","content":"Sentinel TBD","keywords":"sentinel","version":"Next"},{"title":"skywalking-springboot","type":0,"sectionRef":"#","url":"/en-us/docs/user/skywalking-springboot","content":"skywalking-springboot Placeholder. DO NOT DELETE.","keywords":"higress higress官网 云原生网关","version":"Next"},{"title":"Request Monitoring Based on Prometheus","type":0,"sectionRef":"#","url":"/en-us/docs/user/prometheus","content":"","keywords":"Higress Prometheus","version":"Next"},{"title":"Use the Higress Console Built-In Monitor Suite​","type":1,"pageTitle":"Request Monitoring Based on Prometheus","url":"/en-us/docs/user/prometheus#use-the-higress-console-built-in-monitor-suite","content":"Higress Console has a built-in monitor suite based on Prometheus + Grafana, which isn't installed by default. When installing Higress with Helm, you can enable it by adding the following argument to the command line: --set global.o11y.enabled=true. helm repo add higress.io https://higress.io/helm-charts helm install higress -n higress-system higress.io/higress --create-namespace --render-subchart-notes --set global.o11y.enabled=true  Note: When installing to a standard K8s cluster (meaning without specifying global.local=true), the PersistentVolumeClaim configured in the suite uses the access mode of ReadWriteMany by default. If the target K8s cluster doesn't support this mode, you can add the following argument to the command line to change the access mode to ReadWriteOnce: --set global.pvc.rwxSupported=false. helm repo add higress.io https://higress.io/helm-charts helm install higress -n higress-system higress.io/higress --create-namespace --render-subchart-notes --set global.o11y.enabled=true --set global.pvc.rwxSupported=false  After installation, open Higress Console in your browser, and click &quot;Dashboard&quot; on the left navigation area. The built-in dashboard will be displayed on the right.  ","version":"Next","tagName":"h2"},{"title":"Use a Standalone Monitor Suite​","type":1,"pageTitle":"Request Monitoring Based on Prometheus","url":"/en-us/docs/user/prometheus#use-a-standalone-monitor-suite","content":"Both the data and control planes of Higress expose a set of metrics via API. To monitor them, you just need to add probe configurations into Prometheus and configure a dashboard in Grafana. Before starting the configuration, please open Higress Console in your browser and switch to &quot;Dashboard&quot; from the left navigation area. The external dashboard configuration page and related notes will be displayed on the right.  Update the configurations of Prometheus and Grafana following the notes. Then put the Grafana dashboard into the textbox above and save. The page will reload automatically and your dashboard will be shown on the right.  If you'd like to update the dashboard URL, you can click the &quot;Reconfigure&quot; button on the top left corner. ","version":"Next","tagName":"h2"},{"title":"SpringCloud","type":0,"sectionRef":"#","url":"/en-us/docs/user/spring-cloud","content":"SpringCloud TBD","keywords":"SpringCloud discovery","version":"Next"},{"title":"WAF","type":0,"sectionRef":"#","url":"/en-us/docs/user/waf","content":"WAF TBD","keywords":"waf","version":"Next"},{"title":"Quick Start","type":0,"sectionRef":"#","url":"/en-us/docs/user/quickstart","content":"","keywords":"Higress","version":"Next"},{"title":"Environment 1: Use in K8s​","type":1,"pageTitle":"Quick Start","url":"/en-us/docs/user/quickstart#environment-1-use-in-k8s","content":"","version":"Next","tagName":"h2"},{"title":"Stage 1: Installation​","type":1,"pageTitle":"Quick Start","url":"/en-us/docs/user/quickstart#stage-1-installation","content":"Scenario 1: Use in a Standard K8s Cluster​ Helm Installation Command helm repo add higress.io https://higress.io/helm-charts helm install higress -n higress-system higress.io/higress --create-namespace --render-subchart-notes  Obtain the LoadBalancer IP of Higress Gateway and write it down. You can use it and port 80 and 443 to access Higress Gateway. kubectl get svc -n higress-system higress-gateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}'  Scenario 2: Use in Local Environment​ The following groups can be applied to all local K8s clusters. If there is already a test cluster running on your PC, you can go to Step 3 directly and install Higress. Step 1: Install kubectl &amp; kind​ MacOS: # for Intel Macs [ $(uname -m) = x86_64 ] &amp;&amp; curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl&quot; [ $(uname -m) = x86_64 ] &amp;&amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.18.0/kind-darwin-amd64 # for Apple Silicon Macs (M1/M2) [ $(uname -m) = arm64 ] &amp;&amp; curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/arm64/kubectl&quot; [ $(uname -m) = arm64 ] &amp;&amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.18.0/kind-darwin-arm64 chmod +x ./kubectl ./kind sudo mv ./kubectl ./kind /usr/local/bin  Use PowerShell in Windows: Download kubectl v1.27.1 and kind v0.18.0. Or if you have curl installed, use the following commands: curl.exe -LO &quot;https://dl.k8s.io/release/v1.27.1/bin/windows/amd64/kubectl.exe&quot; curl.exe -Lo kind-windows-amd64.exe https://kind.sigs.k8s.io/dl/v0.18.0/kind-windows-amd64  Note: To find out the latest stable version of kubectl (for example, for scripting), take a look at https://dl.k8s.io/release/stable.txt. Then rename downloaded kind-windows-amd64 or kind-windows-amd64.exe to kind.exe. And move both exe files to a file location on your system PATH. Linux: curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.18.0/kind-linux-amd64 chmod +x ./kubectl ./kind sudo mv ./kubectl ./kind /usr/local/bin  Step 2: Create and Activate kind​ First, create a cluster config file: cluster.conf # cluster.conf kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane kubeadmConfigPatches: - | kind: InitConfiguration nodeRegistration: kubeletExtraArgs: node-labels: &quot;ingress-ready=true&quot; extraPortMappings: - containerPort: 80 hostPort: 80 protocol: TCP - containerPort: 443 hostPort: 443 protocol: TCP  Commands for Mac &amp; Linux: kind create cluster --name higress --config=cluster.conf kubectl config use-context kind-higress  Commands for Windows: kind.exe create cluster --name higress --config=cluster.conf kubectl.exe config use-context kind-higress  Note currently, the namespace higress-system has a svc which type is LoadBalancer, it can not get IP in cluster by default. we can use official support to enable this function,please refer to https://kind.sigs.k8s.io/docs/user/loadbalancer/ Step 3: Install Higress​ when you install higress in local environment, you should use --set global.local=true. helm repo add higress.io https://higress.io/helm-charts helm install higress -n higress-system higress.io/higress --create-namespace --render-subchart-notes --set global.local=true --set global.o11y.enabled=false  If you'd like to enable the built-in o11y suite, please refer to the Deploy by Helm document. After installation, you can access Higress Gateway in the local cluster via port 80 and 443. Note: If you are using a pre-existed local K8s cluster, you may need to use the command below to forward ports out of the cluster, and try the local ports later. kubectl port-forward service/higress-gateway -n higress-system 80:80 443:443  ","version":"Next","tagName":"h3"},{"title":"Stage 2: Configuration​","type":1,"pageTitle":"Quick Start","url":"/en-us/docs/user/quickstart#stage-2-configuration","content":"Assuming that there is already a service named &quot;foo&quot; deployed in the default namespace, we'd like to create a route, forwarding http://foo.bar.com/foo requests to this service. You can use the following YAML to create this test service if needed. kind: Pod apiVersion: v1 metadata: name: foo-app labels: app: foo spec: containers: - name: foo-app image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/http-echo:0.2.4-alpine args: - &quot;-text=foo&quot; --- kind: Service apiVersion: v1 metadata: name: foo-service spec: selector: app: foo ports: # Default port used by the image - port: 5678  Method 1: Use Higress Console​ Use hgctl to open Higress Console. hgctl dashboard console  For the first time, you will need to configure the admin credentials.  After configuration, log into Higress Console using the credential just configured.  Click &quot;Domain Management&quot; on the navigation bar left. Click &quot;Create Domain&quot; button. Then fill the form according to the image below and click &quot;Confirm&quot; button.  Click &quot;Route Management&quot; on the navigation bar left. Click &quot;Create Route&quot; button. Then fill the form according to the image below and click &quot;Confirm&quot; button.  Method 2: Use Ingress CRD​ Use the YAML below to create the test route we need. apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: foo spec: ingressClassName: higress rules: - host: foo.bar.com http: paths: - pathType: Prefix path: &quot;/foo&quot; backend: service: name: foo-service port: number: 5678  ","version":"Next","tagName":"h3"},{"title":"Stage 3: Validate​","type":1,"pageTitle":"Quick Start","url":"/en-us/docs/user/quickstart#stage-3-validate","content":"Use the following command to check whether the test route works properly: # should output &quot;foo&quot; curl http://GatewayIP/foo -H &quot;Host: foo.bar.com&quot;  ","version":"Next","tagName":"h3"},{"title":"Environment 2: Use in Docker Compose without K8s​","type":1,"pageTitle":"Quick Start","url":"/en-us/docs/user/quickstart#environment-2-use-in-docker-compose-without-k8s","content":"","version":"Next","tagName":"h2"},{"title":"Stage 1: Installation​","type":1,"pageTitle":"Quick Start","url":"/en-us/docs/user/quickstart#stage-1-installation-1","content":"Installation Command 1: Use a separated-deployed Nacos service curl -fsSL https://higress.io/standalone/get-higress.sh | bash -s -- -a -c nacos://192.168.0.1:8848 --nacos-username=nacos --nacos-password=nacos  Please replace 192.168.0.1 with the actual IP address of Nacos service (if Nacos is deployed locally, please use a non-loopback address such as localhost or 127.0.0.1), and update the value of --nacos-username and --nacos-password based on actual configurations. If authentication isn't enabled in Nacos, you can remove these two arguments. Installation Command 2: Use the Higress Built-In Nacos curl -fsSL https://higress.io/standalone/get-higress.sh | bash -s -- -a --use-builtin-nacos  Note: On Windows, you can use Unix-like shells such as Cygwin, Git Bash to execute the command above. ","version":"Next","tagName":"h3"},{"title":"Stage 2: Configuration​","type":1,"pageTitle":"Quick Start","url":"/en-us/docs/user/quickstart#stage-2-configuration-1","content":"Open http://127.0.0.1:8080 in browser. For the first time, you will need to configure the admin credentials.  After configuration, log into Higress Console using the credential just configured.  Click &quot;Service Sources&quot; on the navigation bar left. Click &quot;Create Service Source&quot; button. Then fill the form according to the image below and click &quot;Confirm&quot; button.  Click &quot;Domain Management&quot; on the navigation bar left. Click &quot;Create Domain&quot; button. Then fill the form according to the image below and click &quot;Confirm&quot; button.  Click &quot;Route Management&quot; on the navigation bar left. Click &quot;Create Route&quot; button. Then fill the form according to the image below and click &quot;Confirm&quot; button.  ","version":"Next","tagName":"h3"},{"title":"Stage 3: Validate​","type":1,"pageTitle":"Quick Start","url":"/en-us/docs/user/quickstart#stage-3-validate-1","content":"Use the following command to check whether the test route works properly: # should output a JSON object containing request data curl http://localhost/get?foo=bar -H 'host: foo.bar.com'  ","version":"Next","tagName":"h3"},{"title":"Implement a WASM plugin with Golang","type":0,"sectionRef":"#","url":"/en-us/docs/user/wasm-go","content":"","keywords":"wasm","version":"Next"},{"title":"1. Prepare Development Tools​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#1-prepare-development-tools","content":"First, install Golang and Tinygo. ","version":"Next","tagName":"h2"},{"title":"1. Golang​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#1-golang","content":"Min Version: 1.18 Official download link: https://go.dev/doc/install Windows​ Download the installer: https://go.dev/dl/go1.19.windows-amd64.msiRun the downloaded installer to start the installation. It will be installed to Program Files or Program Files (x86) folder by default.After completed the installation, open &quot;Run&quot; dialog with hotkey &quot;Win+R&quot;. Type &quot;cmd&quot; in the dialog and click &quot;OK&quot; to open Command Line Prompt. Type: go version. If version info is displayed, the package has been successfully installed. MacOS​ Download the installer: https://go.dev/dl/go1.19.darwin-amd64.pkgRun the downloaded installer to start the installation. It will be installed to /usr/local/go folder by default.Open Terminal and type: go version. If version info is displayed, the package has been successfully installed. Linux​ Download the installer: https://go.dev/dl/go1.19.linux-amd64.tar.gzExecute following commands to start the installation: rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.19.linux-amd64.tar.gz export PATH=$PATH:/usr/local/go/bin  Execute go version. If version info is displayed, the package has been successfully installed. ","version":"Next","tagName":"h3"},{"title":"2. TinyGo​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#2-tinygo","content":"Min Version: 0.28.1 Official download link: https://tinygo.org/getting-started/install/ Windows​ Download the package: https://github.com/tinygo-org/tinygo/releases/download/v0.28.1/tinygo0.28.1.windows-amd64.zipUnpack the package to the target folderIf the package is unpacked to folder C:\\tinygo, you need to add C:\\tinygo\\bin into the environment variable PATH, using set command in Command Line Prompt for example. set PATH=%PATH%;&quot;C:\\tinygo\\bin&quot;;  Execute tinygo version command in Command Line Prompt. If version info is displayed, the package has been successfully installed. MacOS​ Download and unpack the package wget https://github.com/tinygo-org/tinygo/releases/download/v0.28.1/tinygo0.28.1.darwin-amd64.tar.gz tar -zxf tinygo0.28.1.darwin-amd64.tar.gz  If the package is unpacked to folder /tmp, you need to add /tmp/tinygo/bin to the environment variable PATH: export PATH=/tmp/tinygo/bin:$PATH  Execute command tinygo version in Terminal. If version info is displayed, the package has been successfully installed. Linux​ Following steps are based on Ubuntu AMD64. For other OSes, please refer to the official document. Download and install the DEB package. wget https://github.com/tinygo-org/tinygo/releases/download/v0.28.1/tinygo_0.28.1_amd64.deb sudo dpkg -i tinygo_0.28.1_amd64.deb export PATH=$PATH:/usr/local/bin  Execute command tinygo version in Terminal. If version info is displayed, the package has been successfully installed. ","version":"Next","tagName":"h3"},{"title":"2. Write a plugin​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#2-write-a-plugin","content":"","version":"Next","tagName":"h2"},{"title":"1. Initialize the project​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#1-initialize-the-project","content":"You can create your wasm-go plugin directory in the repo higress's plugins/wasm-gothat you can use the scaffolding tools provided in this directory（see 1.1）； or create a new directory for your Go project yourself(see 1.2). If you are developing wasm-go plugins for the first time, it is recommended to take the former. 1.1 create wasm-go plugin in plugins/wasm-go​ git clone https://github.com/alibaba/higress.git, to clone project to local；cd plugins/wasm-go; mkdir wasm-demo-go, to go to the project's plugins/wasm-go directory and create the wasm-demo-go directory. 1.2 create a new project yourself​ Create a new folder for the project. For example: wasm-demo-go.Execute following commands in the new folder to initialize the Go project: go mod init wasm-demo-go  If you are in the Chinese mainland, you may need to set a proxy for downloading dependencies. go env -w GOPROXY=https://proxy.golang.com.cn,direct  Download dependencies for plugin building.  go get github.com/tetratelabs/proxy-wasm-go-sdk go get github.com/alibaba/higress/plugins/wasm-go@main go get github.com/tidwall/gjson  ","version":"Next","tagName":"h3"},{"title":"2. Write main.go​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#2-write-maingo","content":"You can find a simple sample below, which provides following functions: If mockEnable is set to true, send hello world directly as the response.If mockEnable is not set or set to false, add an extra HTTP header hello: world to the original request. More samples can be found in section 4 below. Note: Plugin configurations use YAML format in the gateway console. But plugins receive them in JSON format. So in the sample below, actual config data are extracted from JSON by the parseConfig function. package main import ( &quot;github.com/alibaba/higress/plugins/wasm-go/pkg/wrapper&quot; &quot;github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm&quot; &quot;github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm/types&quot; &quot;github.com/tidwall/gjson&quot; ) func main() { wrapper.SetCtx( // Plugin name &quot;my-plugin&quot;, // A custom function for parsing plugin configurations wrapper.ParseConfigBy(parseConfig), // A custom function for processing request headers wrapper.ProcessRequestHeadersBy(onHttpRequestHeaders), ) } // Custom plugin configuration type MyConfig struct { mockEnable bool } // Plugin configurations set in the console with YAML format will be converted to JSON. So we just need to parse config data from JSON. func parseConfig(json gjson.Result, config *MyConfig, log wrapper.Log) error { // Get the configuration property and set to the config object. config.mockEnable = json.Get(&quot;mockEnable&quot;).Bool() return nil } func onHttpRequestHeaders(ctx wrapper.HttpContext, config MyConfig, log wrapper.Log) types.Action { proxywasm.AddHttpRequestHeader(&quot;hello&quot;, &quot;world&quot;) if config.mockEnable { proxywasm.SendHttpResponse(200, nil, []byte(&quot;hello world&quot;), -1) } return types.ActionContinue }  HTTP Processing Pointcuts​ In the sample above, wrapper.ProcessRequestHeadersBy applies custom function onHttpRequestHeaders when processing requests inHTTP request header processing stage. Besides that, you can use following methods to set custom processing functions for various stages. HTTP Processing Stage\tTrigger Time\tPointcut Mounting MethodHTTP request header processing stage\tWhen gateway receives request headers from client\twrapper.ProcessRequestHeadersBy HTTP request body processing stage\tWhen gateway receives request body from client\twrapper.ProcessRequestBodyBy HTTP response header processing stage\tWhen gateway receives response headers from upstream\twrapper.ProcessResponseHeadersBy HTTP response body processing stage\tWhen gateway receives response body from upstream\twrapper.ProcessResponseBodyBy Utility Functions​ In the sample above, proxywasm.AddHttpRequestHeader and proxywasm.SendHttpResponse are two utility methods provided by the plugin SDK. You can find major utility functions in the table below: Category\tName\tUsage\tAvailable HTTP Processing Stage(s)Request Header Processing\tGetHttpRequestHeaders\tGet all the request headers sent by the client\tHTTP request header processing stage ReplaceHttpRequestHeaders\tReplace all headers in the request.\tHTTP request header processing stage GetHttpRequestHeader\tGet the specified header in the request.\tHTTP request header processing stage RemoveHttpRequestHeader\tRemove the specified header from the request.\tHTTP request header processing stage ReplaceHttpRequestHeader\tReplace the specified header in the response.\tHTTP request header processing stage AddHttpRequestHeader\tAdd a new header to the request.\tHTTP request header processing stage Request Body Processing\tGetHttpRequestBody\tGet the request body received from client.\tHTTP request body processing stage AppendHttpRequestBody\tAppend the specified binary data to the request body.\tHTTP request body processing stage PrependHttpRequestBody\tPrepend the specified binary data to the request body.\tHTTP request body processing stage ReplaceHttpRequestBody\tReplace the entire request body received from client.\tHTTP request body processing stage Response Header Processing\tGetHttpResponseHeaders\tGet all the response headers received from upstream.\tHTTP response header processing stage ReplaceHttpResponseHeaders\tReplace all headers in the response.\tHTTP response header processing stage GetHttpResponseHeader\tGet the specified header in the response.\tHTTP response header processing stage RemoveHttpResponseHeader\tRemove the specified header from the response.\tHTTP response header processing stage ReplaceHttpResponseHeader\tReplace the specified header in the response.\tHTTP response header processing stage AddHttpResponseHeader\tAdd a new header to the response.\tHTTP response header processing stage Response Body Processing\tGetHttpResponseBody\tGet the response body received from upstream.\tHTTP response body processing stage AppendHttpResponseBody\tAppend the specified binary data to the response body.\tHTTP response body processing stage PrependHttpResponseBody\tPrepend the specified binary data to the response body.\tHTTP response body processing stage ReplaceHttpResponseBody\tReplace the entire response body with specific data.\tHTTP response body processing stage HTTP Call\tDispatchHttpCall\tSend an HTTP request.\t- GetHttpCallResponseHeaders\tGet the response headers associated with a DispatchHttpCall call.\t- GetHttpCallResponseBody\tGet the response body associated with a DispatchHttpCall call.\t- GetHttpCallResponseTrailers\tGet the response trailer associated with a DispatchHttpCall call.\t- Respond Directly\tSendHttpResponse\tReturn a specific HTTP response immediately.\t- Process Resuming\tResumeHttpRequest\tResume the request processing workflow paused before.\t- ResumeHttpResponse\tResume the response processing workflow paused before.\t- ","version":"Next","tagName":"h3"},{"title":"3. Build WASM file​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#3-build-wasm-file","content":"If your project directory is in the plugins/wasm-go directory, see 3.1.If you are using a self-initialized directory, see 3.2. 3.1 Building wasm-go plugin image with scaffolding​ The wasm-go plugin can be built quickly with the following command: $ PLUGIN_NAME=wasm-demo-go make build ... ... image: wasm-demo-go:20230223-173305-3b1a471 output wasm file: extensions/wasm-demo-go/plugin.wasm  This command eventually builds a wasm file and a Docker image. This local wasm file is exported to the specified plugin's directory and can be used directly for local debugging. You can also use make build-push to build and push the image together. See plugins/wasm-go for more. 3.2 Compile wasm files locally​ Execute the following command: tinygo build -o main.wasm -scheduler=none -target=wasi -gc=custom -tags='custommalloc nottinygc_finalizer' ./main.go  A new file named main.wasm will be created after a successful compilation, which will be used in the local debugging sample below as well. When using custom plugin function in the cloud native gateway market, you just need to upload this file. ","version":"Next","tagName":"h3"},{"title":"3. Local Debugging​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#3-local-debugging","content":"TBD ","version":"Next","tagName":"h2"},{"title":"More Samples​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#more-samples","content":"","version":"Next","tagName":"h2"},{"title":"Plugin with No Configuration​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#plugin-with-no-configuration","content":"If the plugin needs no configuration, just define an empty config struct. package main import ( &quot;github.com/alibaba/higress/plugins/wasm-go/pkg/wrapper&quot; &quot;github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm&quot; &quot;github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm/types&quot; ) func main() { wrapper.SetCtx( &quot;hello-world&quot;, wrapper.ProcessRequestHeadersBy(onHttpRequestHeaders), ) } type MyConfig struct {} func onHttpRequestHeaders(ctx wrapper.HttpContext, config MyConfig, log wrapper.Log) types.Action { proxywasm.SendHttpResponse(200, nil, []byte(&quot;hello world&quot;), -1) return types.ActionContinue }  ","version":"Next","tagName":"h3"},{"title":"Send Requests to External Services in the Plugin​","type":1,"pageTitle":"Implement a WASM plugin with Golang","url":"/en-us/docs/user/wasm-go#send-requests-to-external-services-in-the-plugin","content":"Only HTTP requests are supported for now. You can send requests to Nacos and K8s services with service sources configured in the gateway console, and services with a static IP or DNS source. Please be noted, HTTP client in the net/http package cannot be used here. You only use the wrapped HTTP client as shown in the sample below. In the following sample works as below: Parse service type in the config parsing stage, and generate the corresponding HTTP client.In the HTTP request header processing stage, send a service request to the configured URL.Parse response headers and get token value using the specified key.Set the token value to the headers of the original request. package main import ( &quot;errors&quot; &quot;net/http&quot; &quot;strings&quot; &quot;github.com/alibaba/higress/plugins/wasm-go/pkg/wrapper&quot; &quot;github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm&quot; &quot;github.com/tetratelabs/proxy-wasm-go-sdk/proxywasm/types&quot; &quot;github.com/tidwall/gjson&quot; ) func main() { wrapper.SetCtx( &quot;http-call&quot;, wrapper.ParseConfigBy(parseConfig), wrapper.ProcessRequestHeadersBy(onHttpRequestHeaders), ) } type MyConfig struct { // The client used to initiate an HTTP request client wrapper.HttpClient // Request URL requestPath string // Use this key when extracting token header from the service response and setting a header to the request. The value is configurable. tokenHeader string } func parseConfig(json gjson.Result, config *MyConfig, log wrapper.Log) error { config.tokenHeader = json.Get(&quot;tokenHeader&quot;).String() if config.tokenHeader == &quot;&quot; { return errors.New(&quot;missing tokenHeader in config&quot;) } config.requestPath = json.Get(&quot;requestPath&quot;).String() if config.requestPath == &quot;&quot; { return errors.New(&quot;missing requestPath in config&quot;) } serviceSource := json.Get(&quot;serviceSource&quot;).String() // If serviceSource is set to &quot;ip&quot; or &quot;dns&quot;, serviceName shall be specified when creating the service. // If serviceSource is set to &quot;nacos&quot; or &quot;k8s&quot;, serviceName shall be set to the original name specified when registering the service. serviceName := json.Get(&quot;serviceName&quot;).String() servicePort := json.Get(&quot;servicePort&quot;).Int() if serviceName == &quot;&quot; || servicePort == 0 { return errors.New(&quot;invalid service config&quot;) } switch serviceSource { case &quot;k8s&quot;: namespace := json.Get(&quot;namespace&quot;).String() config.client = wrapper.NewClusterClient(wrapper.K8sCluster{ ServiceName: serviceName, Namespace: namespace, Port: servicePort, }) return nil case &quot;nacos&quot;: namespace := json.Get(&quot;namespace&quot;).String() config.client = wrapper.NewClusterClient(wrapper.NacosCluster{ ServiceName: serviceName, NamespaceID: namespace, Port: servicePort, }) return nil case &quot;ip&quot;: config.client = wrapper.NewClusterClient(wrapper.StaticIpCluster{ ServiceName: serviceName, Port: servicePort, }) return nil case &quot;dns&quot;: domain := json.Get(&quot;domain&quot;).String() config.client = wrapper.NewClusterClient(wrapper.DnsCluster{ ServiceName: serviceName, Port: servicePort, Domain: domain, }) return nil default: return errors.New(&quot;unknown service source: &quot; + serviceSource) } } func onHttpRequestHeaders(ctx wrapper.HttpContext, config MyConfig, log wrapper.Log) types.Action { // Use the Get function of the client to initiate an HTTP Get request. // The timeout parameter is omitted here, whose default value is 500ms. config.client.Get(config.requestPath, nil, // A callback function which will be called asynchronously when receiving the response. func(statusCode int, responseHeaders http.Header, responseBody []byte) { // Process the response with a status code other than 200. if statusCode != http.StatusOK { log.Errorf(&quot;http call failed, status: %d&quot;, statusCode) proxywasm.SendHttpResponse(http.StatusInternalServerError, nil, []byte(&quot;http call failed&quot;), -1) return } // Print out the status code and response body log.Infof(&quot;get status: %d, response body: %s&quot;, statusCode, responseBody) // Extract token value from the response header and set the header of the original request token := responseHeaders.Get(config.tokenHeader) if token != &quot;&quot; { proxywasm.AddHttpRequestHeader(config.tokenHeader, token) } // Resume the original request processing workflow. Continue the process, so the request can be forwarded to the upstream. proxywasm.ResumeHttpRequest() }) // We need to wait for the callback to finish its process. // Return Pause action here to pause the request processing workflow, which can be resumed by a ResumeHttpRequest call. return types.ActionPause }  ","version":"Next","tagName":"h3"},{"title":"Wasm Plugin Image Specification","type":0,"sectionRef":"#","url":"/en-us/docs/user/wasm-image-spec","content":"","keywords":"wasm image oci","version":"Next"},{"title":"1. Overview​","type":1,"pageTitle":"Wasm Plugin Image Specification","url":"/en-us/docs/user/wasm-image-spec#1-overview","content":"This document defines the structure and building method of Higress Wasm Plugin images. When preparing, we referred to Wasm Image Specification. ","version":"Next","tagName":"h2"},{"title":"2. Image Structure​","type":1,"pageTitle":"Wasm Plugin Image Specification","url":"/en-us/docs/user/wasm-image-spec#2-image-structure","content":"Each image needs to be build in OCI Image Specification based on scratch, and shall only contain following files: spec.yaml: Required. Metadata file of the plugin. Please refer to section 3 below for its format.README.md: Required. Readme file describing the usage of the plugin. Markdown format. Written in English or Chinese.README_{lang}.md: Optional. Readme file describing the usage of the plugin. Markdown format. lang can be ZH or EN.icon.png: Optional. Icon file of the plugin. A URL of the plugin icon can also be specified in spec.yaml. If both the file and the URL are configured, the file will be used for display.plugin.wasm: Required. The binary file of the plugin. Each layer of the image can only contain a single file. Except the layer containing plugin.wasm, the media type of other layers shall be set according to the file inside: spec.yaml: application/vnd.module.wasm.spec.v1+yaml README.md: application/vnd.module.wasm.doc.v1+markdownREADME_{lang}.md: application/vnd.module.wasm.doc.v1.{lang}+markdownicon.png: application/vnd.module.wasm.icon.v1+png plugin.wasm must be placed in the last layer of the image, with the media type of application/vnd.oci.image.layer.v1.tar+gzip. ","version":"Next","tagName":"h2"},{"title":"3. Metadata File Format​","type":1,"pageTitle":"Wasm Plugin Image Specification","url":"/en-us/docs/user/wasm-image-spec#3-metadata-file-format","content":"The format of metadata file, spec.yaml, is as following, using the metadata of basic-auth plugin as an example: apiVersion: 1.0.0 # The schema version of the content below. Always use to 1.0.0 for now. info: category: auth # Plugin category. Options: auth (authentication and authorization), security (security protection), protocol (protocol transformation), flow-control, flow-monitor,custom name: basic-auth/v1 # Plugin name, which is the unique identifier of the plugin. It is recommended to add a version suffix, such as &quot;/v1&quot;, just in case an incompatible upgrade in the future. title: Basic Auth # Display name. I18n supported. description: 本插件实现了基于 HTTP Basic Auth 标准进行认证鉴权的功能。 # Plugin description. I18n supported. x-description-i18n: # I18n content of the description field above. Translated contents can be added using &quot;x-{name}-i18n&quot; fields for all i18n-supported fields. en-US: This plugin implements an authentication function based on HTTP Basic Auth standard. iconUrl: https://img.alicdn.com/imgextra/i1/O1CN01I7WjVs1K33EQjInid_!!6000000001107-2-tps-960-290.png # Optional. URL of plugin icon file. version: 1.0.0 # Plugin version contact: # Plugin contact name: Higress Team url: http://higress.io/ email: admin@higress.io spec: phase: AUTHN # Execution phase. Please refer to https://istio.io/latest/docs/reference/config/proxy_extensions/wasm-plugin/#PluginPhase priority: 0 # Execution priority within the given phase. Please refer to https://istio.io/latest/docs/reference/config/proxy_extensions/wasm-plugin/#WasmPlugin configSchema: # Schema of the plugin's runtime configurations, which shall be defined with the Schema object in OpenAPI 3.0.0 standard. openAPIV3Schema: # Please refer to https://openapi.apifox.cn/#schema-%E5%AF%B9%E8%B1%A1 for the data structure. Some fields which can be used for display support i18n. type: object properties: consumers: type: array scope: GLOBAL # Field effective scope. Options: GLOBAL (global configuration), INSTANCE (instance-level configuration, which can be set associated to routes or domains.), ALL (Available as both global and instance-level configurations). Optional. Default value is INSTANCE. title: 调用方列表 x-title-i18n: en-US: Consumer List description: 服务调用方列表，用于对请求进行认证 x-description-i18n: en-US: List of service consumers which will be used in request authentication items: type: object properties: name: type: string title: 名称 x-title-i18n: en-US: Name description: 该调用方的名称 x-description-i18n: en-US: The name of the consumer # Data validation shall be implemented according JSON Schema Validation Spec # https://json-schema.org/draft/2020-12/json-schema-validation.html # Following values are supported: # - maximum # - minimum # - maxLength # - minLength # - pattern # - maxItems # - minItems # - required minLength: 6 # Minimum length for data validation maxLength: 256 # Maximum length for data validation pattern: &quot;^$&quot; # Regular experssion for data validation example: - consumer1 credential: type: string title: 访问凭证 x-title-i18n: en-US: Credential description: 该调用方的访问凭证 x-description-i18n: en-US: The credential of the consumer example: - admin:123456 required: - name - credential allow: type: array title: 授权访问的调用方列表 x-title-i18n: en-US: Allowed Consumers description: 对于匹配上述条件的请求，允许访问的调用方列表 x-description-i18n: en-US: Consumers to be allowed for matched requests items: type: string example: - consumer1 required: - allow - consumers example: consumers: - name: consumer1 credential: admin:123456 - name: consumer2 credential: guest:abc allow: - consumer2  ","version":"Next","tagName":"h2"},{"title":"4. How to Build an Image​","type":1,"pageTitle":"Wasm Plugin Image Specification","url":"/en-us/docs/user/wasm-image-spec#4-how-to-build-an-image","content":"Start the builder container from the Higress root folder GO_VERSION=&quot;1.19&quot; TINYGO_VERSION=&quot;0.28.1&quot; ORAS_VERSION=&quot;1.0.0&quot; PLUGIN_NAME=&quot;hello-world&quot; BUILDER_IMAGE=&quot;higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/wasm-go-builder:go${GO_VERSION}-tinygo${TINYGO_VERSION}-oras${ORAS_VERSION}&quot; docker run -v ${PWD}:/workspace -e PLUGIN_NAME=${PLUGIN_NAME} -it --rm /bin/bash  Build Wasm file inside the container cd /workspace/plugins/wasm-go/extensions/${PLUGIN_NAME} go mod tidy tinygo build -o ./plugin.wasm -scheduler=none -target=wasi -gc=custom -tags='custommalloc nottinygc_finalizer' ./main.go  Build and push an OCI image tar czvf plugin.tar.gz plugin.wasm IMAGE_REGISTRY_SERVICE=docker.io IMAGE_REPOSITORY=&quot;${IMAGE_REGISTRY_SERVICE}/plugins/${PLUGIN_NAME}&quot; IMAGE_TAG=&quot;v0.0.1&quot; oras login ${IMAGE_REGISTRY_SERVICE} oras push ${IMAGE_REPOSITORY}:${IMAGE_TAG} \\ ./spec.yaml:application/vnd.module.wasm.spec.v1+yaml \\ ./README.md:application/vnd.module.wasm.doc.v1+markdown \\ ./README_EN.md:application/vnd.module.wasm.doc.v1.en+markdown \\ ./plugin.tar.gz:application/vnd.oci.image.layer.v1.tar+gzip  ","version":"Next","tagName":"h2"},{"title":"5. Appendix​","type":1,"pageTitle":"Wasm Plugin Image Specification","url":"/en-us/docs/user/wasm-image-spec#5-appendix","content":"","version":"Next","tagName":"h2"},{"title":"5.1 Default Icon for Each Plugin Category​","type":1,"pageTitle":"Wasm Plugin Image Specification","url":"/en-us/docs/user/wasm-image-spec#51-default-icon-for-each-plugin-category","content":"Custom: https://img.alicdn.com/imgextra/i1/O1CN018iKKih1iVx287RltL_!!6000000004419-2-tps-42-42.pngAuthentication and Authorization: https://img.alicdn.com/imgextra/i4/O1CN01BPFGlT1pGZ2VDLgaH_!!6000000005333-2-tps-42-42.pngFlow Control: https://img.alicdn.com/imgextra/i3/O1CN01bAFa9k1t1gdQcVTH0_!!6000000005842-2-tps-42-42.pngFlow Monitor: https://img.alicdn.com/imgextra/i4/O1CN01aet3s61MoLOEEhRIo_!!6000000001481-2-tps-42-42.pngSecurity Protection: https://img.alicdn.com/imgextra/i1/O1CN01jKT9vC1O059vNaq5u_!!6000000001642-2-tps-42-42.pngProtocol Transformation: https://img.alicdn.com/imgextra/i2/O1CN01xIywow1mVGuRUjbhe_!!6000000004959-2-tps-42-42.png ","version":"Next","tagName":"h3"}],"options":{"languages":["en","zh"],"id":"default"}}